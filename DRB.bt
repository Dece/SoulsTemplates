//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: DRB.bt
//   Authors: TKGP
//   Version: 1.01
//   Purpose: DS1 UI configuration
//  Category: Dark Souls
// File Mask: *.drb
//  ID Bytes: 44 52 42 00 00 00 00 00 00 00 00 00 00 00 00 00
//   History: 
//------------------------------------------------

// Set to 0 to read PTDE DRB
// Set to 1 to read DSR DRB
local byte DSR = 0;

typedef struct (string assertName) {
    char name[4]; Assert(name == assertName);
    int size <hidden=true>; Assert(size == 0);
    int count <hidden=true>; Assert(size == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
} NullHeader <read=ReadNullHeader>;

wstring ReadNullHeader(NullHeader& header) {
    return header.name;
}

typedef struct (string assertName) {
    char name[4]; Assert(name == assertName);
    int size <format=hex>;
    int count <hidden=true>; Assert(count == 1);
    int unk0C <hidden=true>; Assert(unk0C == 0);
    local quad start <format=hex> = FTell();
} BlobHeader <read=ReadBlobHeader>;

wstring ReadBlobHeader(BlobHeader& header) {
    string str;
    SPrintf(str, "%-4s       %5X", header.name, header.size);
    return str;
}

typedef struct (string assertName) {
    char name[4]; Assert(name == assertName);
    int size <format=hex>;
    int count;
    int unk0C <hidden=true>; Assert(unk0C == 0);
    local quad start <format=hex> = FTell();
} BlockHeader <read=ReadBlockHeader>;

wstring ReadBlockHeader(BlockHeader& header) {
    string str;
    SPrintf(str, "%-4s[%4i] %5X", header.name, header.count, header.size);
    return str;
}

typedef struct {
    local quad str;
    local quad texi;
    local quad shpr;
    local quad ctpr;
    local quad anip;
    local quad intp;
    local quad scdp;
    local quad shap;
    local quad ctrl;
    local quad anik;
    local quad anio;
    local quad anim;
    local quad scdk;
    local quad scdo;
    local quad scdl;
    local quad dlgo;
    local quad dlg;
} BlockOffsets;


typedef struct {
    wstring str;
} STREntry <read=ReadSTREntry>;

wstring ReadSTREntry(STREntry& entry) {
    return entry.str;
}

typedef struct {
    BlockHeader header("STR\0");
    //STREntry entries[header.count] <optimize=false>;
} STR <read=ReadSTR>;

wstring ReadSTR(STR& str) {
    return ReadBlockHeader(str.header);
}


typedef struct (BlockOffsets& offsets) {
    int nameOffset <format=hex, hidden=true>;
    int pathOffset <format=hex, hidden=true>;
    int unk08 <hidden=true>; Assert(unk08 == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
    
    local quad pos <hidden=true> = FTell();
    FSeek(offsets.str + nameOffset);
    wstring name;
    FSeek(offsets.str + pathOffset);
    wstring path;
    FSeek(pos);
} TEXIEntry <read=ReadTEXIEntry>;

wstring ReadTEXIEntry(TEXIEntry& entry) {
    string str;
    SPrintf(str, "%s - %s", entry.name, entry.path);
    return str;
}

typedef struct (BlockOffsets& offsets) {
    BlockHeader header("TEXI");
    if (header.count > 0) {
        TEXIEntry entries(offsets)[header.count] <optimize=false>;
    }
} TEXI <read=ReadTEXI>;

wstring ReadTEXI(TEXI& texi) {
    return ReadBlockHeader(texi.header);
}


typedef struct (BlockOffsets& offsets) {
    int typeOffset <format=hex, hidden=true>;
    int dataOffset <format=hex, hidden=true>;
    
    local quad pos <hidden=true> = FTell();
    FSeek(offsets.str + typeOffset);
    wstring type;
    FSeek(offsets.shpr + dataOffset);
    
    short leftEdge;
    short topEdge;
    short rightEdge;
    short bottomEdge;
    if (DSR && type != "Null") {
        short dsr1;
        short dsr2;
        int dsr3; Assert(dsr3 >= 0 && dsr3 <= 120);
    }

    if (type == "Dialog") {
        short dlgIndex;
        byte unk02; Assert(unk02 == 0 || unk02 == 1);
        byte unk03; Assert(unk03 == 1);
        int unk04;
        int unk08;
        int unk0C; Assert(unk0C == 0);
    } else if (type == "GouraudRect") {
        int unk00; Assert(unk00 == 1);
        ubyte abgrTopLeft[4];
        ubyte abgrTopRight[4];
        ubyte abgrBottomRight[4];
        ubyte abgrBottomLeft[4];
    } else if (type == "GouraudSprite") {
        int unk00; Assert(unk00 == 0);
        int unk04; Assert(unk04 == 0);
        short unk08; Assert(unk08 == -1);
        short unk0A; Assert(unk0A == 256);
        ubyte abgrTopLeft[4];
        ubyte abgrTopRight[4];
        ubyte abgrBottomRight[4];
        ubyte abgrBottomLeft[4];
    } else if (type == "Mask") {
        int unk00;
        int unk04; Assert(unk04 == 1);
        int unk08; Assert(unk08 == 0);
        byte unk0C; Assert(unk0C == 0);
        byte unk0D; Assert(unk0D == 0);
        byte unk0E; Assert(unk0E == 0);
    } else if (type == "MonoFrame") {
        byte unk00; Assert(unk00 == 1);
        byte unk01; Assert(unk01 == 0);
        byte unk02; Assert(unk02 == 0);
        byte unk03; Assert(unk03 >= 1 && unk03 <= 3);
        int unk04; Assert(unk04 >= 0 && unk04 <= 7);
        int unk08; // Maybe ABGR?
    } else if (type == "MonoRect") {
        int unk00; Assert(unk00 == 1);
        int unk04; // Seems like a palette of 80 colors (0 uses abgr below)
        ubyte abgr[4];
    } else if (type == "Null") {
    } else if (type == "ScrollText") {
        byte unk00; Assert(unk00 == 1);
        byte unk01; Assert(unk01 == 1);
        short lineSpacing;
        int color;
        ubyte argb[4];
        short fontSize;
        byte alignment;
        byte textType; Assert(textType >= 1 && textType <= 2);
        int unk10; Assert(unk10 == 0x1C);
        if (textType == 1) {
            int charLength;
            int textID;
        } else {
            int charLength;
        }
        int unk1C; Assert(unk1C == 0);
        int unk20; Assert(unk20 == 0);
        int unk24; Assert(unk24 == 0xF || unk24 == 0x64);
        int unk28; Assert(unk28 == 0);
        short unk2C; Assert(unk2C == 0);
    } else if (type == "Sprite") {
        short texLeftEdge;
        short texTopEdge;
        short texRightEdge;
        short texBottomEdge;
        short texiIndex;
        //    1 - nothing?
        //    2 - nothing?
        //    4 - nothing?
        //    8 - nothing?
        //   10 - rotate 90 degrees clockwise
        //   20 - rotate 180 degrees
        //   40 - flip vertical
        //   80 - flip horizontal
        //  100 - alpha transparency
        //  200 - overlay
        //  400 - same as 200?
        //  800 - same as 200?
        // 1000 - same as 200?
        // 2000 - same as 200?
        // 4000 - same as 200?
        // 8000 - same as 200?
        ushort flags <format=hex>;
        int unk0C; // Often 0
        ubyte abgr[4];
    } else if (type == "Text") {
        byte unk00; Assert(unk00 >= 0 || unk00 <= 2);
        byte unk01; Assert(unk01 == 1);
        short lineSpacing;
        int color;
        ubyte abgr[4];
        // 0-11: different sizes of menu font
        // 12: talk font
        short fontSize;
        // 0 - top left
        // 1 - right
        // 2 - hcenter
        // 4 - bottom
        // 8 - vcenter
        byte alignment;
        byte textType; Assert(textType >= 0 && textType <= 2);
        int unk10; Assert(unk10 == 0x1C);
        // Literal
        if (textType == 0) {
            int stringOffset <format=hex>;
        // FMG
        } else if (textType == 1) {
            int charLength;
            int textID;
        // Dynamic
        } else {
            int charLength;
        }
        int unk1C; Assert(unk1C == 0);
        short unk20; Assert(unk20 == 0);
        
        if (textType == 0) {
            FSeek(offsets.str + stringOffset);
            wstring str;
        }
    } else {
        Assert(false);
    }
    FSeek(pos);
} SHAPEntry <read=ReadSHAPEntry>;

wstring ReadSHAPEntry(SHAPEntry& entry) {
    string str;
    if (entry.type == "GouraudRect") {
        SPrintf(str, "%s - %i [%3i,%3i,%3i,%3i][%3i,%3i,%3i,%3i][%3i,%3i,%3i,%3i][%3i,%3i,%3i,%3i]",
            entry.type, entry.unk08,
            entry.abgrTopLeft[0], entry.abgrTopLeft[1], entry.abgrTopLeft[2], entry.abgrTopLeft[3],
            entry.abgrTopRight[0], entry.abgrTopRight[1], entry.abgrTopRight[2], entry.abgrTopRight[3],
            entry.abgrBottomRight[0], entry.abgrBottomRight[1], entry.abgrBottomRight[2], entry.abgrBottomRight[3],
            entry.abgrBottomLeft[0], entry.abgrBottomLeft[1], entry.abgrBottomLeft[2], entry.abgrBottomLeft[3]);
    } else if (entry.type == "GouraudSprite") {
        SPrintf(str, "%s", entry.type);
    } else if (entry.type == "Mask") {
        SPrintf(str, "%s", entry.type);
    } else if (entry.type == "MonoFrame") {
        SPrintf(str, "%s - %i %i %i %i %i %8X",
            entry.type, entry.unk08, entry.unk09, entry.unk0A, entry.unk0B, entry.unk0C, entry.unk10);
    } else if (entry.type == "MonoRect") {
        SPrintf(str, "%s - %i %2i [%3i,%3i,%3i,%3i]", entry.type, entry.unk08, entry.unk0C,
            entry.abgr[0], entry.abgr[1], entry.abgr[2], entry.abgr[3]);
    } else if (entry.type == "Text") {
        if (entry.textType == 0) {
            SPrintf(str, "%s - %s", entry.type, entry.str);
        } else {
            str = entry.type;
        }
    } else {
        str = entry.type;
    }
    return entry.type;
}

typedef struct (BlockOffsets& offsets) {
    BlockHeader header("SHAP");
    SHAPEntry entries(offsets)[header.count] <optimize=false>;
} SHAP <read=ReadSHAP>;

wstring ReadSHAP(SHAP& shap) {
    return ReadBlockHeader(shap.header);
}


typedef struct (BlockOffsets& offsets) {
    int typeOffset <format=hex, hidden=true>;
    int ctprOffset <format=hex, hidden=true>;
    
    local quad pos <hidden=true> = FTell();
    FSeek(offsets.str + typeOffset);
    wstring type;
    FSeek(offsets.ctpr + ctprOffset);
    if (type == "DmeCtrlScrollText") {
        int unk00 <hidden=true>; Assert(unk00 == 0);
    } else if (type == "FrpgMenuDlgObjContentsHelpItem") {
        // Always the same for all the ctrls in a group
        int unk00;
        // These 5 seem like indices, they're never above like 70
        int unk04;
        int unk08;
        int unk0C;
        int unk10;
        int unk14;
        int textID;
    } else if (type == "Static") {
        int unk00 <hidden=true>; Assert(unk00 == 0);
    } else {
        Assert(false);
    }
    FSeek(pos);
} CTRLEntry <read=ReadCTRLEntry>;

wstring ReadCTRLEntry(CTRLEntry& entry) {
    string str;
    if (entry.type == "FrpgMenuDlgObjContentsHelpItem") {
        SPrintf(str, "%s %2i %2i %2i %2i %2i %2i %6i", entry.type,
            entry.unk00, entry.unk04, entry.unk08, entry.unk0C, entry.unk10, entry.unk14, entry.textID);
    } else {
        str = entry.type;
    }
    return str;
}

typedef struct (BlockOffsets& offsets) {
    BlockHeader header("CTRL");
    //CTRLEntry entries(offsets)[header.count] <optimize=false>;
} CTRL <read=ReadCTRL>;

wstring ReadCTRL(CTRL& ctrl) {
    return ReadBlockHeader(ctrl.header);
}


typedef struct (BlockOffsets& offsets, int anioIndex) {
    int nameOffset <format=hex, hidden=true>;
    int unk04; // Frame count?
    byte unk08; Assert(unk08 >= 0 && unk08 <= 1);
    byte unk09; Assert(unk09 >= 1 && unk09 <= 2);
    short unk0A <hidden=true>; Assert(unk0A == 0);
    int intpOffset;
    int anipOffset;
    int unk14 <hidden=true>; Assert(unk14 == 0);
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1C <hidden=true>; Assert(unk1C == 0);
    
    local quad pos <hidden=true> = FTell();
    FSeek(offsets.str + nameOffset);
    wstring name;
    if (unk09 == 2) {
        FSeek(offsets.intp + intpOffset);
        float intp00;
        int intp04 <hidden=true>; Assert(intp04 == 0); // Probably another float
        float intp08;
        float intp08;
    }
    FSeek(offsets.anip + anipOffset);
    if (anioIndex == 0) {
        int anio00;
    } else if (anioIndex == 1) {
        short anio00;
        short anio02;
    } else if (anioIndex == 2) {
        int anio00; Assert(anio00 == 0 || anio00 == 2);
        if (anio00 == 2) {
            int anio04;
        } else {
            byte anio04;
        }
    } else {
        int anio00; Assert(anio00 == 0);
        float anio04;
    }
    FSeek(pos);
} ANIKEntry <read=ReadANIKEntry>;

wstring ReadANIKEntry(ANIKEntry& entry) {
    string str;
    SPrintf(str, "%3i %i %i %s %4X %4X",
        entry.unk04, entry.unk08, entry.unk09, entry.name, entry.intpOffset, entry.anipOffset);
    return str;
}

typedef struct (BlockOffsets& offsets) {
    BlockHeader header("ANIK");
    if (header.count > 0) {
        //ANIKEntry entries(offsets)[header.count] <optimize=false>;
    }
} ANIK <read=ReadANIK>;

wstring ReadANIK(ANIK& anik) {
    return ReadBlockHeader(anik.header);
}


typedef struct (BlockOffsets& offsets) {
    int unk00; Assert(unk00 >= 0 && unk00 <= 3); // Index?
    int anikCount;
    int anikOffset <format=hex>;
    int unk0C; // Frame count?

    if (anikCount > 0) {
        local quad pos <hidden=true> = FTell();
        FSeek(offsets.anik + anikOffset);
        ANIKEntry anikEntries(offsets, unk00)[anikCount] <bgcolor=cLtGray, optimize=false>;
        FSeek(pos);
    }
} ANIOEntry <read=ReadANIOEntry>;

wstring ReadANIOEntry(ANIOEntry& entry) {
    string str;
    SPrintf(str, "%i %i %3i", entry.unk00, entry.anikCount, entry.unk0C);
    return str;
}

typedef struct (BlockOffsets& offsets) {
    BlockHeader header("ANIO");
    if (header.count > 0) {
        //ANIOEntry entries(offsets)[header.count] <optimize=false>;
    }
} ANIO <read=ReadANIO>;

wstring ReadANIO(ANIO& anio) {
    return ReadBlockHeader(anio.header);
}


typedef struct (BlockOffsets& offsets) {
    int nameOffset <format=hex>;
    int anioCount; Assert(anioCount == 4);
    int anioOffset <format=hex>;
    int unk0C; // Frame count?
    int unk10; Assert(unk10 == 4);
    int unk14; Assert(unk14 == 4);
    int unk18; Assert(unk18 == 4);
    int unk1C; Assert(unk1C == 1);
    int unk20 <hidden=true>; Assert(unk20 == 0);
    int unk24 <hidden=true>; Assert(unk24 == 0);
    int unk28 <hidden=true>; Assert(unk28 == 0);
    int unk2C <hidden=true>; Assert(unk2C == 0);

    local quad pos <hidden=true> = FTell();
    FSeek(offsets.str + nameOffset);
    wstring name;
    FSeek(offsets.anio + anioOffset);
    ANIOEntry anioEntries(offsets)[anioCount] <bgcolor=cSilver, optimize=false>;
    FSeek(pos);
} ANIMEntry <read=ReadANIMEntry>;

wstring ReadANIMEntry(ANIMEntry& entry) {
    string str;
    SPrintf(str, "%3i %s", entry.unk0C, entry.name);
    return str;
}

typedef struct (BlockOffsets& offsets) {
    BlockHeader header("ANIM");
    if (header.count > 0) {
        ANIMEntry entries(offsets)[header.count] <optimize=false>;
    }
} ANIM <read=ReadANIM>;

wstring ReadANIM(ANIM& anim) {
    return ReadBlockHeader(anim.header);
}


typedef struct (BlockOffsets& offsets) {
    int nameOffset <format=hex, hidden=true>;
    int unk04;
    int unk08; Assert(unk08 == 1);
    int unk0C; Assert(unk0C == 0 || unk0C == 1);
    int scdpOffset <format=hex, hidden=true>;
    int unk14;
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1C <hidden=true>; Assert(unk1C == 0);
    
    local quad pos <hidden=true> = FTell();
    FSeek(offsets.str + nameOffset);
    wstring name;
    FSeek(offsets.scdp + scdpOffset);
    int animIndex;
    int scdp04; Assert(scdp04 == 0 || scdp04 == 1);
    FSeek(pos);
} SCDKEntry <read=ReadSCDKEntry>;

wstring ReadSCDKEntry(SCDKEntry& entry) {
    string str;
    SPrintf(str, "%s %3i %i %i %4X %3i %3i %i", entry.name,
        entry.unk04, entry.unk08, entry.unk0C, entry.scdpOffset, entry.unk14, entry.animIndex, entry.scdp04);
    return str;
}

typedef struct (BlockOffsets& offsets) {
    BlockHeader header("SCDK");
    if (header.count > 0) {
        //SCDKEntry entries(offsets)[header.count] <optimize=false>;
    }
} SCDK <read=ReadSCDK>;

wstring ReadSCDK(SCDK& scdk) {
    return ReadBlockHeader(scdk.header);
}


typedef struct (BlockOffsets& offsets) {
    int nameOffset <format=hex, hidden=true>;
    int scdkCount <hidden=true>;
    int scdkOffset <format=hex, hidden=true>;
    int unk0C;

    local quad pos <hidden=true> = FTell();
    FSeek(offsets.str + nameOffset);
    wstring name;
    if (scdkCount > 0) {
        FSeek(offsets.scdk + scdkOffset);
        SCDKEntry scdkEntries(offsets)[scdkCount] <bgcolor=cLtGreen, optimize=false>;
    }
    FSeek(pos);
} SCDOEntry <read=ReadSCDOEntry>;

wstring ReadSCDOEntry(SCDOEntry& entry) {
    string str;
    SPrintf(str, "%3i %s", entry.unk0C, entry.name);
    return str;
}

typedef struct (BlockOffsets& offsets) {
    BlockHeader header("SCDO");
    if (header.count > 0) {
        //SCDOEntry entries(offsets)[header.count] <optimize=false>;
    }
} SCDO <read=ReadSCDO>;

wstring ReadSCDO(SCDO& scdo) {
    return ReadBlockHeader(scdo.header);
}


typedef struct (BlockOffsets& offsets) {
    int nameOffset <format=hex, hidden=true>;
    int scdoCount <hidden=true>;
    int scdoOffset <format=hex, hidden=true>;
    int unk0C;
    
    local quad pos <hidden=true> = FTell();
    FSeek(offsets.str + nameOffset);
    wstring name;
    if (scdoCount > 0) {
        FSeek(offsets.scdo + scdoOffset);
        SCDOEntry scdoEntries(offsets)[scdoCount] <bgcolor=cGreen, optimize=false>;
    }
    FSeek(pos);
} SCDLEntry <read=ReadSCDLEntry>;

wstring ReadSCDLEntry(SCDLEntry& entry) {
    string str;
    SPrintf(str, "%3i %s", entry.unk0C, entry.name);
    return str;
}

typedef struct (BlockOffsets& offsets) {
    BlockHeader header("SCDL");
    if (header.count > 0) {
        SCDLEntry entries(offsets)[header.count] <optimize=false>;
    }
} SCDL <read=ReadSCDL>;

wstring ReadSCDL(SCDL& scdl) {
    return ReadBlockHeader(scdl.header);
}


typedef struct (BlockOffsets& offsets) {
    int nameOffset <format=hex, hidden=true>;
    int shapOffset <format=hex, hidden=true>;
    int ctrlOffset <format=hex, hidden=true>; Assert(ctrlOffset == shapOffset);
    int unk0C <hidden=true>; Assert(unk0C == 0);
    int unk10 <hidden=true>; Assert(unk10 == 0);
    int unk14 <hidden=true>; Assert(unk14 == 0);
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1C <hidden=true>; Assert(unk1C == 0);
    
    local quad pos <hidden=true> = FTell();
    FSeek(offsets.str + nameOffset);
    wstring name;
    FSeek(offsets.shap + shapOffset);
    SHAPEntry shapEntry(offsets) <bgcolor=cLtBlue>;
    FSeek(offsets.ctrl + ctrlOffset);
    CTRLEntry ctrlEntry(offsets) <bgcolor=cAqua>;
    FSeek(pos);
} DLGOEntry <read=ReadDLGOEntry>;

wstring ReadDLGOEntry(DLGOEntry& entry) {
    return entry.name;
}

typedef struct (BlockOffsets& offsets) {
    BlockHeader header("DLGO");
    if (header.count > 0) {
        //DLGOEntry entries(offsets)[header.count] <optimize=false>;
    }
} DLGO <read=ReadDLGO>;

wstring ReadDLGO(DLGO& dlgo) {
    return ReadBlockHeader(dlgo.header);
}


typedef struct (BlockOffsets& offsets) {
    int nameOffset <format=hex, hidden=true>;
    int shapOffset <format=hex, hidden=true>;
    int ctrlOffset <format=hex, hidden=true>; Assert(ctrlOffset == shapOffset);
    int unk0C <hidden=true>; Assert(unk0C == 0);
    int unk10 <hidden=true>; Assert(unk10 == 0);
    int unk14 <hidden=true>; Assert(unk14 == 0);
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1C <hidden=true>; Assert(unk1C == 0);
    int dlgoCount <hidden=true>;
    int dlgoOffset <format=hex, hidden=true>;
    short leftEdge;
    short topEdge;
    short rightEdge;
    short bottomEdge;
    short unk30[5];
    short unk3A <hidden=true>; Assert(unk3A == 0);
    int unk3C <hidden=true>; Assert(unk3C == 0);
    
    local quad pos <hidden=true> = FTell();
    FSeek(offsets.str + nameOffset);
    wstring name;
    FSeek(offsets.shap + shapOffset);
    SHAPEntry shapEntry(offsets) <bgcolor=cLtBlue>;
    FSeek(offsets.ctrl + ctrlOffset);
    CTRLEntry ctrlEntry(offsets) <bgcolor=cAqua>;
    if (dlgoCount > 0) {
        FSeek(offsets.dlgo + dlgoOffset);
        DLGOEntry dlgoEntries(offsets)[dlgoCount] <bgcolor=cLtRed, optimize=false>;
    }
    FSeek(pos);
} DLGEntry <read=ReadDLGEntry>;

wstring ReadDLGEntry(DLGEntry& entry) {
    return entry.name;
}

typedef struct (BlockOffsets& offsets) {
    BlockHeader header("DLG\0");
    DLGEntry entries(offsets)[header.count] <optimize=false>;
} DLG <read=ReadDLG>;

wstring ReadDLG(DLG& dlg) {
    return ReadBlockHeader(dlg.header);
}


BlockOffsets offsets;

NullHeader drb("DRB\0") <bgcolor=cBlack, fgcolor=cWhite>;

STR str <bgcolor=cLtPurple>;
FSeek(str.header.start + str.header.size);
offsets.str = str.header.start;

TEXI texi(offsets) <bgcolor=cPurple>;
FSeek(texi.header.start + texi.header.size);
offsets.texi = texi.header.start;

BlobHeader shpr("SHPR") <bgcolor=cLtBlue>;
FSeek(shpr.start + shpr.size);
offsets.shpr = shpr.start;

BlobHeader ctpr("CTPR") <bgcolor=cAqua>;
FSeek(ctpr.start + ctpr.size);
offsets.ctpr = ctpr.start;

BlobHeader anip("ANIP") <bgcolor=cLtGray>;
FSeek(anip.start + anip.size);
offsets.anip = anip.start;

BlobHeader intp("INTP") <bgcolor=cLtGray>;
FSeek(intp.start + intp.size);
offsets.intp = intp.start;

BlobHeader scdp("SCDP") <bgcolor=cLtGreen>;
FSeek(scdp.start + scdp.size);
offsets.scdp = scdp.start;

SHAP shap(offsets) <bgcolor=cLtBlue>;
FSeek(shap.header.start + shap.header.size);
offsets.shap = shap.header.start;

CTRL ctrl(offsets) <bgcolor=cAqua>;
FSeek(ctrl.header.start + ctrl.header.size);
offsets.ctrl = ctrl.header.start;

ANIK anik(offsets) <bgcolor=cLtGray>;
FSeek(anik.header.start + anik.header.size);
offsets.anik = anik.header.start;

ANIO anio(offsets) <bgcolor=cSilver>;
FSeek(anio.header.start + anio.header.size);
offsets.anio = anio.header.start;

ANIM anim(offsets) <bgcolor=cGray>;
FSeek(anim.header.start + anim.header.size);
offsets.anim = anim.header.start;

SCDK scdk(offsets) <bgcolor=cLtGreen>;
FSeek(scdk.header.start + scdk.header.size);
offsets.scdk = scdk.header.start;

SCDO scdo(offsets) <bgcolor=cGreen>;
FSeek(scdo.header.start + scdo.header.size);
offsets.scdo = scdo.header.start;

SCDL scdl(offsets) <bgcolor=cDkGreen>;
FSeek(scdl.header.start + scdl.header.size);
offsets.scdl = scdl.header.start;

DLGO dlgo(offsets) <bgcolor=cLtRed>;
FSeek(dlgo.header.start + dlgo.header.size);
offsets.dlgo = dlgo.header.start;

DLG dlg(offsets) <bgcolor=cRed>;
FSeek(dlg.header.start + dlg.header.size);
offsets.dlg = dlg.header.start;

NullHeader end("END\0") <bgcolor=cBlack, fgcolor=cWhite>;