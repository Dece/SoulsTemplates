//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: MSB2\Event.bt
//   Authors: TKGP
//   Version: 
//   Purpose: SotFS map layout events
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

enum <short> EventType {
    EventTypeLight = 1,
    EventTypeShadow = 2,
    EventTypeFog = 3,
    EventTypeBGColor = 4,
    EventTypeMapOffset = 5,
    EventTypeWarp = 6,
    EventTypeCheapMode = 7,
};

struct EventLight;
struct EventShadow;
struct EventFog;
struct EventBGColor;
struct EventMapOffset;
struct EventWarp;
struct EventCheapMode;

typedef struct {
    local quad start <hidden=true> = FTell();
    
    quad nameOffset <format=hex>;
    int eventIndex;
    EventType type;
    short id;
    quad typeDataOffset <format=hex>;
    
    FSeek(start + nameOffset);
    wstring name;
    
    FSeek(start + typeDataOffset);
    switch (type) {
        case EventTypeLight: EventLight light; break;
        case EventTypeShadow: EventShadow shadow; break;
        case EventTypeFog: EventFog fog; break;
        case EventTypeBGColor: EventBGColor bgColor; break;
        case EventTypeMapOffset: EventMapOffset mapOffset; break;
        case EventTypeWarp: EventWarp warp; break;
        case EventTypeCheapMode: EventCheapMode cheapMode; break;
    }
} Event <read=ReadEvent>;

wstring ReadEvent(Event& event) {
    string str;
    SPrintf(str, "%i ", event.type);
    return str + event.name;
}


typedef struct {
    short unk00;
    short unk02; Assert(unk02 == -1);
    float unk04;
    float unk08;
    ubyte color0C[4]; // RGBA
    ubyte color10[4];
    int unk14; Assert(unk14 == 0);
    int unk18; Assert(unk18 == 0);
    float unk1C;
    float unk20;
    ubyte color24[4];
    ubyte color28[4];
    int unk2C; Assert(unk2C == 0);
    int unk30; Assert(unk30 == 0);
    ubyte color34[4];
    ubyte color38[4];
    ubyte color3C[4];
    float unk40;
    int unk44;
    int unk48; Assert(unk48 == 0);
    int unk4C; Assert(unk4C == 0);
    int unk50; Assert(unk50 == 0);
    int unk54; Assert(unk54 == 0);
    int unk58; Assert(unk58 == 0);
    int unk5C; Assert(unk5C == 0);
    int unk60; Assert(unk60 == 0);
    int unk64; Assert(unk64 == 0);
    int unk68; Assert(unk68 == 0);
    int unk6C; Assert(unk6C == 0);
    int unk70; Assert(unk70 == 0);
    int unk74; Assert(unk74 == 0);
    int unk78; Assert(unk78 == 0);
    int unk7C; Assert(unk7C == 0);
} EventLight;


typedef struct {
    int unk00;
    float unk04;
    float unk08;
    float unk0C;
    int unk10;
    ubyte color14[4];
    float unk18;
    int unk1C;
    float unk20;
    ubyte color24[4];
    int unk28; Assert(unk28 == 0);
    int unk2C; Assert(unk2C == 0);
    int unk30; Assert(unk30 == 0);
    int unk34; Assert(unk34 == 0);
    int unk38; Assert(unk38 == 0);
    int unk3C; Assert(unk3C == 0);
} EventShadow;


typedef struct {
    int unk00;
    ubyte color04[4];
    float unk08;
    float unk0C;
    float unk10;
    int unk14;
    int unk18; Assert(unk18 == 0);
    int unk1C; Assert(unk1C == 0);
    int unk20; Assert(unk20 == 0);
    int unk24; Assert(unk24 == 0);
} EventFog;


typedef struct {
    ubyte color[4];
    int unk04; Assert(unk04 == 0);
    int unk08; Assert(unk08 == 0);
    int unk0C; Assert(unk0C == 0);
    int unk10; Assert(unk10 == 0);
    int unk14; Assert(unk14 == 0);
    int unk18; Assert(unk18 == 0);
    int unk1C; Assert(unk1C == 0);
    int unk20; Assert(unk20 == 0);
    int unk24; Assert(unk24 == 0);
} EventBGColor;


typedef struct {
    Vector3 translation;
    float degree; Assert(degree == 0);
} EventMapOffset;


typedef struct {
    int unk00;
    Vector3 position;
} EventWarp;


typedef struct {
    int unk00;
    int unk04; Assert(unk04 == 0);
    int unk08; Assert(unk08 == 0);
    int unk0C; Assert(unk0C == 0);
} EventCheapMode;