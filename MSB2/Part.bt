//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: MSB2\Part.bt
//   Authors: TKGP
//   Version: 
//   Purpose: DS2 map layout parts
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

enum <short> PartType {
    PartTypeMapPiece = 0,
    PartTypeObject = 1,
    PartTypeCollision = 3,
    PartTypeNavmesh = 4,
    PartTypeConnectCollision = 5,
};

struct PartMapPiece;
struct PartObject;
struct PartCollision;
struct PartNavmesh;
struct PartConnectCollision;

typedef struct {
    local quad start <hidden=true> = FTell();

    quad nameOffset <format=hex>; Assert(nameOffset == 0x80);
    PartType type;
    short id;
    int modelIndex;
    Vector3 position;
    Vector3 rotation;
    Vector3 scale;
    uint drawGroupsMaybe[4];
    int unk44;
    int unk48;
    int unk4C;
    int unk50;
    uint dispGroupsMaybe[4];
    int unk64;
    int unk68;
    int unk6C;
    quad typeDataOffset <format=hex>;
    quad unk78; Assert(unk78 == 0);
    
    FSeek(start + nameOffset);
    wchar_t name[0x10];
    
    FSeek(start + typeDataOffset);
    switch (type) {
        case PartTypeMapPiece: PartMapPiece mapPiece; break;
        case PartTypeObject: PartObject object; break;
        case PartTypeCollision: PartCollision collision; break;
        case PartTypeNavmesh: PartNavmesh navmesh; break;
        case PartTypeConnectCollision: PartConnectCollision connectCollision; break;
    }
} Part <read=ReadPart>;

wstring ReadPart(Part& part) {
    string str;
    SPrintf(str, "%i ", part.type);
    return str + part.name;
}


typedef struct {
    short unk00;
    short unk02;
    int unk04; Assert(unk04 == 0);
} PartMapPiece;


typedef struct {
    int unk00;
    int unk04;
    int unk08; Assert(unk08 == 0);
    int unk0C; Assert(unk0C == 0);
} PartObject;


typedef struct {
    int unk00;
    int unk04;
    int unk08;
    int unk0C;
    int unk10;
    int unk14;
    int unk18;
    int unk1C;
    int unk20;
    short unk24;
    short unk26;
    int unk28;
    int unk2C;
    int unk30;
    short unk34;
    short unk36;
    int unk38;
    int unk3C;
    int unk40;
    int unk44;
    int unk48;
    int unk4C;
    int unk50;
    int unk54;
} PartCollision;


typedef struct {
    int unk00;
    int unk04;
    int unk08;
    int unk0C;
    int unk10; Assert(unk10 == 0);
    int unk14; Assert(unk14 == 0);
    int unk18; Assert(unk18 == 0);
    int unk1C; Assert(unk1C == 0);
} PartNavmesh;


typedef struct {
    int collisionIndex;
    byte mapID[4];
    int unk08;
    int unk0C;
} PartConnectCollision;