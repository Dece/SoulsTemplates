//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: OMD.bt
//   Authors: TKGP
//   Version: 
//   Purpose: King's Field IV .omd files
//  Category: KFIV
// File Mask: *.omd
//  ID Bytes: 
//   History: 
//------------------------------------------------

// To use this template from another template, define OMD_LIBRARY before including,
// then instantiate type OMD.

#include "..\..\Util.bt"

LittleEndian();

//------------------------------------------------

typedef struct {
    int fileSize <format=hex>;
    short numMeshes;
    short numTriangles;
    int numVertices;
    int offset0C <format=hex>;
} OMDHeader <bgcolor=cLtRed>;

typedef struct {
    VectorShort4 pos;
    VectorShort4 normal;
    VectorShort4 texCoords;
    VectorShort4 color;
} OMDVertex <bgcolor=cGreen>;

typedef struct {
    byte unk00[0x10];
    byte unk10[0x60]; // DMA?
    byte numVertices;
    byte unk71[0xF];  // DMA?
    byte unk80[0x10];
    OMDVertex vertices[numVertices];
    int unkX00;
    int unkX04;
    int unkX08;
    int unkX0C;
} OMDStrip <bgcolor=cLtGreen, optimize=false>;

typedef struct {
    Vector3 translation;
    Vector3 rotation;
    Vector3 scale;
    int ofsStrips <format=hex>;
    int numStrips;
    int unk2C <hidden=true>; Assert(unk2C == 0);
    
    if (numStrips > 0) {
        local quad pos <hidden=true> = FTell();
        FSeek(fileStart + ofsStrips);
        struct { OMDStrip strips[numStrips]; } strips;
        FSeek(pos);
    }
} OMDMesh <read=ReadOMDMesh, bgcolor=cAqua, optimize=false>;

string ReadOMDMesh(OMDMesh& mesh) {
    string str;
    return SPrintf(str, "[%i]", mesh.numStrips);
}

typedef struct {
    Vector3 vec00;
    int unk0C;  // Sometimes NaN if parsed as float.
} OMDStruct3 <bgcolor=cLtPurple>;

//------------------------------------------------

#ifdef OMD_LIBRARY
typedef struct {
#endif

local quad fileStart <hidden=true> = FTell();

OMDHeader header;
struct { OMDMesh meshes[header.numMeshes]; } meshes;

if (header.offset0C != 0) {
    FSeek(fileStart + header.offset0C);
    OMDStruct3 struct3s[32];
}

Assert(FTell() - fileStart <= header.fileSize,
    "OMD read past end of file.");
FSeek(fileStart + header.fileSize);

#ifdef OMD_LIBRARY
} OMD <optimize=false>;
#endif
