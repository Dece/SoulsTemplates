//------------------------------------------------
//--- 010 Editor v10.0.2 Binary Template
//
//      File: Vector4f.bt
//   Authors: dece
//   Version: 
//   Purpose: <X,Y,Z,W> 32-bit float vector
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#ifndef VECTOR4F
#define VECTOR4F

typedef struct {
    float x, y, z, w;
} Vector4f <read=ReadVector4f>;

string ReadVector4f(Vector4f &v) {
    string str;
    SPrintf(str, "< %f, %f, %f, %f >", v.x, v.y, v.z, v.w);
    return str;
}

int InRange(float val, float min, float max) {
    return val >= min && val <= max;
}

int V4fInRange(Vector4f &v, float min, float max) {
    return (
        InRange(v.x, min, max) &&
        InRange(v.y, min, max) &&
        InRange(v.z, min, max) &&
        InRange(v.w, min, max)
    );
}

int BoundingBoxesValid(Vector4f &min, Vector4f &max) {
    return (
        min.x <= max.x &&
        min.y <= max.y &&
        min.z <= max.z
    );  // Do not compare w as the mantissa sometimes contain trash digits.
}

int V4fApproxZero(Vector4f &v) {
    return (
        InRange(v.x, -0.00000001, 0.00000001) &&
        InRange(v.y, -0.00000001, 0.00000001) &&
        InRange(v.z, -0.00000001, 0.00000001) &&
        InRange(v.w, -0.00000001, 0.00000001)
    );
}

#endif