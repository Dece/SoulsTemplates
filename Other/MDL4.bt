//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: MDL4.bt
//   Authors: TKGP
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: *.mdl
//  ID Bytes: 4D 44 4C 34
//   History: 
//------------------------------------------------

#include "Util.bt"

BigEndian();

typedef struct {
    char magic[4]; Assert(magic == "MDL4");
    int version;
    int dataStart;
    int dataSize;
    int dummyCount;
    int materialCount;
    int boneCount;
    int meshCount;
    int unk20;
    Vector3 boundingBoxMin;
    Vector3 boundingBoxMax;
    int unk3C;
    int unk40;

    local int i <hidden=true>;
    for (i = 0; i < 15; i++) {
        int unk44 <hidden=true>; Assert(unk44 == 0);
    }
} Header <bgcolor=cLtRed>;


typedef struct {
    Vector3 unk00;
    Vector3 unk0C;
    int unk18;
    int unk1C;
    int unk20;
    int unk24; Assert(unk24 == 0);
    int unk28; Assert(unk28 == 0);
    int unk2C; Assert(unk2C == 0);
} Dummy <read=ReadDummy, bgcolor=cLtGreen, optimize=false>;

string ReadDummy(Dummy& dummy) {
    string str;
    SPrintf(str, "%s %s", ReadVector3(dummy.unk00), ReadVector3(dummy.unk0C));
    return str;
}


typedef struct {
    local quad start <hidden=true> = FTell();
    byte type;
    char name[0x1F];
    switch (type) {
        case 0:
            int value;
            break;
        case 1:
            float value;
            break;
        case 4:
            float value[4];
            break;
        case 5:
            string value;
            break;
        default:
            Assert(false);
            break;
    }
    Assert(ReadInt() == 0);
    FSeek(start + 0x40);
} Param <read=ReadParam, bgcolor=cDkAqua, optimize=false>;

string ReadParam(Param& param) {
    string str;
    SPrintf(str, "%i %s", param.type, param.name);
    return str;
}


typedef struct {
    local quad start <hidden=true> = FTell();
    char name[0x1F];
    char shader[0x1D];
    byte unk3C;
    byte unk3D;
    byte unk3E;
    byte paramCount;
    struct {
        Param params[paramCount];
    } params;
    FSeek(start + 0x840);
} Material <read=ReadMaterial, bgcolor=cAqua, optimize=false>;

string ReadMaterial(Material& mat) {
    string str;
    SPrintf(str, "%s | %s", mat.name, mat.shader);
    return str;
}


typedef struct {
    char name[0x20];
    Vector3 translation;
    Vector3 rotation;
    Vector3 scale;
    ubyte unk44[0x20];
    int unk64; Assert(unk64 == 0);
    int unk68; Assert(unk68 == 0);
    int unk6C; Assert(unk6C == 0);
    short unk70[16];
} Bone <read=ReadBone, bgcolor=cLtBlue, optimize=false>;

string ReadBone(Bone& bone) {
    string str;
    SPrintf(str, "%s", bone.name);
    return str;
}


typedef struct {
    Vector3 position;
    int unk0C <format=hex>;
    int unk10 <format=hex>;
    int unk14 <format=hex>;
    ubyte color[4];
    Vector2 uvs[4];
    int unk3C; // 0
} Vertex1_0 <bgcolor=cPurple>;

typedef struct {
    Vector3 position;
    int unk0C <format=hex>;
    int unk10 <format=hex>;
    int unk14 <format=hex>;
    ubyte color[4];
    Vector2 uvs[4];
    short boneIndices[4];
    float boneWeights[4];
} Vertex1_1 <bgcolor=cPurple>;

typedef struct {
    ubyte color[4];
    Vector2 uvs[4];
    short boneIndices[4];
    float boneWeights[4];
} Vertex1_2 <bgcolor=cPurple>;


typedef struct {
    Vector3 position;
    int unk0C <format=hex>;
    int unk10 <format=hex>;
    ubyte color[4];
    short uvs[8];
} Vertex2_0 <bgcolor=cPurple>;


typedef struct (Header& header) {
    int size;
    int offset;
    
    local quad pos <hidden=true> = FTell();
    FSeek(header.dataStart + offset);
    ubyte block[size];
    FSeek(pos);
} UnkBlock <optimize=false>;


typedef struct (Header& header) {
    byte vertexFormat; Assert(
           vertexFormat == 0 // 0x40
        || vertexFormat == 1 // 0x54
        || vertexFormat == 2 // 0x3C
        );
    byte materialIndex;
    byte unk02;
    byte unk03;
    ushort vertexIndexCount;
    short unk08;
    short boneIndices[28];
    int vertexIndicesSize <format=hex>;
    int vertexIndicesOffset <format=hex>;
    int bufferSize <format=hex>;
    int bufferOffset <format=hex>;
    
    if (vertexFormat == 2) {
        struct {
            UnkBlock unkBlocks(header)[14];
        } unkBlocks;
        
        quad zero1 <hidden=true>; Assert(zero1 == 0);
        quad zero2 <hidden=true>; Assert(zero2 == 0);
    }
    
    local quad pos <hidden=true> = FTell();
    FSeek(header.dataStart + vertexIndicesOffset);
    short vertexIndices[vertexIndexCount];
    
    local int vertexSize <hidden=true>;
    if (header.version == 0x40001) {
        if (vertexFormat == 0)
            vertexSize = 0x40;
        else if (vertexFormat == 1)
            vertexSize = 0x54;
        else if (vertexFormat == 2)
            vertexSize = 0x3C;
    } else if (header.version == 0x40002) {
        if (vertexFormat == 0)
            vertexSize = 0x28;
    }
    local int vertexCount <hidden=true> = bufferSize / vertexSize;
    Assert((bufferSize % vertexSize) == 0);

    FSeek(header.dataStart + bufferOffset);
    if (header.version == 0x40001) {
        if (vertexFormat == 0)
            Vertex1_0 vertices[vertexCount];
        else if (vertexFormat == 1)
            Vertex1_1 vertices[vertexCount];
        else if (vertexFormat == 2)
            Vertex1_2 vertices[vertexCount];
    } else if (header.version == 0x40002) {
        if (vertexFormat == 0)
            Vertex2_0 vertices[vertexCount];
    }
    FSeek(pos);
} Mesh <bgcolor=cBlue, optimize=false>;


Header header;
if (header.dummyCount > 0) {
    struct {
        Dummy dummies[header.dummyCount];
    } dummies;
}
struct {
    Material materials[header.materialCount];
} materials;
struct {
    Bone bones[header.boneCount];
} bones;
struct {
    Mesh meshes(header)[header.meshCount];
} meshes;