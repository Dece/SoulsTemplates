//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: MDL-Otogi.bt
//   Authors: TKGP
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: [+4] 4D 44 4C 20
//   History: 
//------------------------------------------------

#include "..\Util.bt"

LittleEndian();

typedef struct {
    int fileSize <format=hex>;
    char magic[4]; Assert(magic == "MDL ");
    short unk08;
    short unk0A;
    int unk0C;
    int unk10 <format=hex>;
    int unk14 <format=hex>;

    int count18;
    int indexCount;
    int vertexCountA;
    int vertexCountB;
    int vertexCountC;
    int vertexCountD; Assert(vertexCountD == 0);
    int count30;
    int count34;
    int textureCount;

    int offset3C <format=hex>;
    int indicesOffset <format=hex>;
    int verticesOffsetA <format=hex>;
    int verticesOffsetB <format=hex>;
    int verticesOffsetC <format=hex>;
    int verticesOffsetD <format=hex>;
    int offset54 <format=hex>;
    int offset58 <format=hex>;
    int texturesOffset <format=hex>;
} Header <bgcolor=cLtRed>;


typedef struct {
    byte unk00; // Index in unk34s?
    byte unk01;
    short vertexCount;
    int indexCount;
    int startVertex;
    int startIndex;
} Faceset <bgcolor=cDkYellow>;

typedef struct {
    short facesetCount;
    short unk02;
    int facesetsOffset;
    short unk[8];
    
    local quad pos <hidden=true> = FTell();
    FSeek(facesetsOffset);
    Faceset facesets[facesetCount];
    FSeek(pos);
} FacesetC <bgcolor=cLtYellow, optimize=false>;


typedef struct {
    float unk00;
    float unk04;
    float unk08;
    float unk0C;
    float unk10;
    float unk14;
    float unk18;
    float unk1C;
    float unk20;
    int unk24;
    int unk28;
    int unk2C;
    int unk30;
    int facesetCountA;
    int facesetCountB; 
    int facesetCountC;
    int facesetCountD; Assert(facesetCountD == 0);
    int facesetsOffsetA <format=hex>;
    int facesetsOffsetB <format=hex>;
    int facesetsOffsetC <format=hex>;
    int facesetsOffsetD <format=hex>;
    int unk54;
    float unk58;
    float unk5C;
    float unk60;
    float unk64;
    float unk68;
    float unk6C;
    int unk70 <hidden=true>; Assert(unk70 == 0);
    int unk74 <hidden=true>; Assert(unk74 == 0);
    int unk78 <hidden=true>; Assert(unk78 == 0);
    int unk7C <hidden=true>; Assert(unk7C == 0);
    int unk80 <hidden=true>; Assert(unk80 == 0);
    int unk84 <hidden=true>; Assert(unk84 == 0);
    int unk88 <hidden=true>; Assert(unk88 == 0);
    int unk8C <hidden=true>; Assert(unk8C == 0);
    
    local quad pos <hidden=true> = FTell();
    if (facesetCountA > 0) {
        FSeek(facesetsOffsetA);
        Faceset facesetsA[facesetCountA];
    }
    if (facesetCountB > 0) {
        FSeek(facesetsOffsetB);
        Faceset facesetsB[facesetCountB];
    }
    if (facesetCountC > 0) {
        FSeek(facesetsOffsetC);
        FacesetC facesetsC[facesetCountC];
    }
    if (facesetCountD > 0) {
        FSeek(facesetsOffsetD);
        //FacesetD facesetsD[facesetCountD];
    }
    FSeek(pos);
} Unk18 <bgcolor=cYellow, optimize=false>;


typedef struct {
    float unk00;
    float unk04;
    float unk08;
    float unk0C;
    float unk10;
    float unk14;
    int unk18;
    int unk1C;
} Unk30 <bgcolor=cLtGray>;


typedef struct {
    int unk00;
    int unk04;
    int unk08;
    int unk0C;
    int unk10;
    int unk14;
    int unk18;
    int unk1C;
    float unk20;
    float unk24;
    float unk28;
    float unk2C;
    float unk30;
    float unk34;
    float unk38;
    float unk3C;
    float unk40;
    float unk44;
    float unk48;
    float unk4C;
    int unk50;
    int unk54;
    int unk58;
    int unk5C;
    float unk60;
    int unk64;
    int unk68;
    int unk6C;
    int unk70;
    int unk74;
    int unk78;
    int unk7C;
} Unk34 <bgcolor=cPurple>;


typedef struct {
    string texture;
} Texture <bgcolor=cLtGreen, optimize=false>;


typedef struct {
    Vector3 position;
    int unk0C; // Normal?
    int unk10; Assert(unk10 == 0);
    int unk14; Assert(unk14 == 0);
    int unk18; Assert(unk18 == -1); // Color?
    Vector2 uvs[4];
} VertexA <read=ReadVertexA, bgcolor=cAqua, optimize=false>;

string ReadVertexA(VertexA& vert) {
    string str;
    SPrintf(str, "%8Xh %12i", vert.unk0C, vert.unk0C);
    return str;
}


typedef struct {
    Vector3 position;
    int unk0C;
    int unk10; Assert(unk10 == 0);
    int unk14; Assert(unk14 == 0);
    int unk18; Assert(unk18 == -1);
    Vector2 uvs[4];
    int unk3C; // Seen: 0, 4
} VertexB <read=ReadVertexB, bgcolor=cAqua, optimize=false>;

string ReadVertexB(VertexB& vert) {
    string str;
    SPrintf(str, "%8Xh", vert.unk3C);
    return str;
}


typedef struct {
    Vector3 position;
    int unk0C;
    int unk10; Assert(unk10 == 0);
    int unk14; Assert(unk14 == 0);
    int unk18; Assert(unk18 == -1);
    Vector2 uvs[4];
    int unk3C;
    float unk40;
    int unk44;
} VertexC <bgcolor=cAqua, optimize=false>;


Header header;

FSeek(header.offset3C);
struct { Unk18 unk18s[header.count18]; } unk18s;

FSeek(header.indicesOffset);
short indices[header.indexCount] <bgcolor=cLtBlue>;

FSeek(header.verticesOffsetA);
struct { VertexA verticesA[header.vertexCountA]; } verticesA;

if (header.vertexCountB > 0) {
    FSeek(header.verticesOffsetB);
    struct { VertexB verticesB[header.vertexCountB]; } verticesB;
}

if (header.vertexCountC > 0) {
    FSeek(header.verticesOffsetC);
    struct { VertexC verticesC[header.vertexCountC]; } verticesC;
}

FSeek(header.offset54);
Unk30 unk30s[header.count30];

FSeek(header.offset58);
Unk34 unk34s[header.count34];

FSeek(header.texturesOffset);
struct { Texture textures[header.textureCount]; } textures;