//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: TAE3.bt
//   Authors: TKGP
//   Version: 1.0
//   Purpose: DS3 animation events
//  Category: Dark Souls
// File Mask: *.tae
//  ID Bytes: 54 41 45 20 00 00 00 FF 0C 00 01 00
//   History: 
//------------------------------------------------

LittleEndian();

#include "TAE3_EventData.bt"

typedef struct {
    char magic[4]; Assert(magic == "TAE ");
    byte bigEndian; Assert(bigEndian == 0);
    byte unk05; Assert(unk05 == 0);
    byte unk06; Assert(unk06 == 0);
    byte is64Bit; Assert(is64Bit == -1);
    // It's really an int, I checked
    int version <format=hex>; Assert(version == 0x1000C || version == 0x1000D);
    int fileSize <format=hex>;
    quad unk10 <format=hex>; Assert(unk10 == 0x40);
    quad unk18; Assert(unk18 == 1);
    quad unk20 <format=hex>; Assert(unk20 == 0x50);
    quad unk28 <format=hex>; Assert(unk28 == 0x80);
    quad unk30 <format=hex>;
    quad unk38; Assert(unk38 == 0);
    byte flags[8] <format=hex>; // 1 0 1 2 2 1 1 1
    quad unk48; Assert(unk48 == 1);
    int fileID;
    int animCount;
    quad animsOffset <format=hex, bgcolor=cLtBlue>;
    quad animGroupsOffset <format=hex, bgcolor=cLtGreen>;
    quad unk68 <format=hex>; Assert(unk68 == 0xA0);
    quad animCount2; Assert(animCount2 == animCount);
    quad firstAnimOffset <format=hex>;
    quad unk80; Assert(unk80 == 1);
    quad unk88 <format=hex>; Assert(unk88 == 0x90);
    int fileID2; Assert(fileID2 == fileID);
    int fileID3; Assert(fileID3 == fileID);
    quad unk98 <format=hex>; Assert(unk98 == 0x50);
    quad unkA0; Assert(unkA0 == 0);
    quad unkA8 <format=hex>; Assert(unkA8 == 0xB0);
    quad skeletonNameOffset <format=hex, bgcolor=cRed>;
    quad sibNameOffset <format=hex, bgcolor=cRed>;
    if (skeletonNameOffset != 0 && sibNameOffset != 0) {
        quad unkC0 <format=hex>; Assert(unkC0 == 0);
        quad unkC8 <format=hex>; Assert(unkC8 == 0);
    }
    
    local quad pos <hidden=true> = FTell();
    if (skeletonNameOffset != 0) {
        FSeek(skeletonNameOffset);
        wstring skeletonName <bgcolor=cRed>;
        //Padding padding1(0x10) <bgcolor=cRed>;
    }
    if (sibNameOffset != 0) {
        FSeek(sibNameOffset);
        wstring sibName <bgcolor=cRed>;
        //Padding padding2(0x10) <bgcolor=cRed>;
    }
    FSeek(pos);
} Header <bgcolor=cLtRed>;


typedef struct {
    quad startTimeOffset <format=hex, bgcolor=cAqua>;
    quad endTimeOffset <format=hex, bgcolor=cAqua>;
    quad eventDataOffset <format=hex>;
    
    local quad pos = FTell();
    FSeek(startTimeOffset);
    float startTime <bgcolor=cAqua>;
    FSeek(endTimeOffset);
    float endTime <bgcolor=cAqua>;
    FSeek(eventDataOffset);
    EventData data;
    FSeek(pos);
} Event <optimize=false>;


typedef struct {
    quad count;
    quad offsetsOffset <format=hex>;
    quad groupOffset <format=hex>;
    quad unk18 <hidden=true, fgcolor=cGray>; Assert(unk18 == 0);
    
    local quad pos = FTell();
    FSeek(groupOffset);
    quad eventType <bgcolor=cSilver>;
    quad zero <hidden=true, bgcolor=cSilver, fgcolor=cSilver>; Assert(zero == 0);
    if (count > 0)
        int eventOffsets[count] <format=hex, bgcolor=cSilver>;
    //Padding padding(0x10) <bgcolor=cSilver>;
    FSeek(pos);
} EventGroup <bgcolor=cGray, optimize=false>;


typedef struct (byte hasFilename) {
    quad reference;
    quad fileNameOffsetOffset <format=hex>; Assert(fileNameOffsetOffset == FTell());
    quad fileNameOffset <format=hex>;
    int unk18;
    int unk1C;
    //quad unk20 <hidden=true>; Assert(unk20 == 0);
    //quad unk28 <hidden=true>; Assert(unk28 == 0);
    
    if (true || hasFilename) {
        local quad pos <hidden=true> = FTell();
        FSeek(fileNameOffset);
        wstring fileName;
        FSeek(pos);
    }
} AnimFile <bgcolor=cLtYellow>;


typedef struct {
    quad eventHeadersOffset <format=hex>;
    quad eventGroupsOffset <format=hex, bgcolor=cGray>;
    quad timesOffset <format=hex, bgcolor=cAqua>;
    quad animFileOffset <format=hex, bgcolor=cLtYellow>;
    int eventCount;
    int eventGroupCount;
    int timeCount;
    int unk2C <hidden=true, fgcolor=cPurple>; Assert(unk2C == 0);
    
    local quad pos <hidden=true> = FTell();
    if (eventCount > 0) {
        FSeek(eventHeadersOffset);
        struct {
            Event events[eventCount];
        } events;
    }
    if (eventGroupCount > 0) {
        FSeek(eventGroupsOffset);
        struct {
            EventGroup eventGroups[eventGroupCount];
        } eventGroups;
    }
    FSeek(animFileOffset);
    AnimFile animFile(eventCount > 0);
    FSeek(pos);
} AnimData <bgcolor=cPurple>;


typedef struct {
    quad id;
    quad animOffset <format=hex, bgcolor=cPurple>;

    local quad pos <hidden=true> = FTell();
    FSeek(animOffset);
    AnimData animData;
    FSeek(pos);
} Animation <read=ReadAnimation, bgcolor=cLtBlue, optimize=false>;

wstring ReadAnimation(Animation& anim) {
    string str;
    SPrintf(str, "%6i %i %6i %6i ", anim.id, anim.animData.animFile.reference, anim.animData.animFile.unk18, anim.animData.animFile.unk1C);
    return str + anim.animData.animFile.fileName;
}


typedef struct {
    int startID;
    int endID;
    quad animOffset <format=hex>;
} AnimGroup <read=ReadAnimGroup>;

string ReadAnimGroup(AnimGroup& group) {
    string str;
    SPrintf(str, "%6i - %6i : %4X", group.startID, group.endID, group.animOffset);
    return str;
}


typedef struct {
    quad groupCount;
    quad groupsOffset <format=hex>;
    
    if (groupCount > 0) {
        local quad pos <hidden=true> = FTell();
        FSeek(groupsOffset);
        AnimGroup animGroups[groupCount];
        FSeek(pos);
    }
} AnimGroups <read=ReadAnimGroups, bgcolor=cLtGreen>;

string ReadAnimGroups(AnimGroups& groups) {
    string str;
    SPrintf(str, "[%3i] : %4X", groups.groupCount, groups.groupsOffset);
    return str;
}


Header header;
FSeek(header.animsOffset);
struct {
    Animation animations[header.animCount];
} animations;
FSeek(header.animGroupsOffset);
AnimGroups animGroups;