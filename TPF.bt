//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: TPF.bt
//   Authors: TKGP
//   Version: 
//   Purpose: Container for multiple textures
//  Category: Dantelion
// File Mask: *.tpf
//  ID Bytes: 54 50 46 00
//   History: 
//------------------------------------------------

// Switch claims to be platform 4, but it has PC amounts of texture info
local int SWITCH = 0;
enum <byte> PLATFORM { PC = 0, X360 = 1, PS3 = 2, PS4 = 4, Xbone = 5 };

if (ReadByte(0xC) == 1 || ReadByte(0xC) == 2)
    BigEndian();
else
    LittleEndian();


typedef struct {
    char magic[4]; Assert(magic == "TPF\0");
    int dataSize <format=hex>;
    int texCount;
    PLATFORM platform;
    byte unk0D;
    byte encoding;
    byte unk0F; Assert(unk0F == 0);
} Header <bgcolor=cLtRed>;


typedef struct (Header& header) {
    uint dataOffset <format=hex>;
    int dataSize <format=hex>;
    byte format;
    byte cubemap;
    byte mipmaps;
    byte unk0B;
    
    if (header.platform == PC || SWITCH) {
        uint nameOffset <format=hex>;
        int unk10;
    } else {
        short width;
        short height;

        if (header.platform == X360) {
            int unk10; Assert(unk10 == 0);
            uint nameOffset <format=hex>;
            int unk18; Assert(unk18 == 0);
        } else if (header.platform == PS3) {
            int unk10;
            int unk14;
            uint nameOffset <format=hex>;
            int unk1C;
            if (unk1C == 1) {
                int unk20;
                int unk24;
                float unk28;
            }
        } else if (header.platform == PS4 || header.platform == Xbone) {
            int imageCount;
            int unk14;
            uint nameOffset <format=hex>;
            int unk1C;
            int dxgiFormat;
        }
    }
    
    local quad pos <hidden=true> = FTell();
    FSeek(dataOffset);
    ubyte bytes[dataSize] <bgcolor=cAqua>;
    FSeek(nameOffset);
    if (header.encoding == 1) {
        wstring name;
    } else {
        string name;
    }
    FSeek(pos);
} Texture <read=ReadTexture, bgcolor=cLtGreen, optimize=false>;

wstring ReadTexture(Texture& tex) {
    return tex.name;
}


Header header;
struct {
    Texture textures(header)[header.texCount];
} textures;