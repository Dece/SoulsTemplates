//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: MSBS.bt
//   Authors: TKGP
//   Version: 
//   Purpose: Sekiro map layouts
//  Category: Dark Souls
// File Mask: *.msb
//  ID Bytes: 4D 53 42 20 01 00 00 00 10 00 00 00 00 00 01 FF
//   History: 
//------------------------------------------------

#include "Util.bt"
#include "MSBS\Model.bt"
#include "MSBS\Event.bt"
#include "MSBS\Point.bt"
#include "MSBS\Route.bt"
#include "MSBS\Part.bt"

typedef struct {
    char magic[4]; Assert(magic == "MSB ");
    int unk04; Assert(unk04 == 1);
    int headerSize; Assert(headerSize == 0x10);
    byte isBigEndian; Assert(isBigEndian == 0);
    byte isBitBigEndian; Assert(isBitBigEndian == 0);
    byte textEncoding; Assert(textEncoding == 1);
    byte is64BitOffset; Assert(is64BitOffset == -1);
} Header <bgcolor=cLtRed>;


typedef struct (string assertName) {
    int unk00;
    int count;
    OffsetString name(1, 1); Assert(name.str == assertName);
    if (count > 1) {
        quad offsets[count - 1];
    }
    quad nextParamOffset;
} Param;


typedef struct {
    Param param("MODEL_PARAM_ST");
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i]);
        Model model;
    }
    FSeek(param.nextParamOffset);
} ModelParam <read=ReadModelParam, bgcolor=cLtGreen>;

string ReadModelParam(ModelParam& modelParam) {
    string str;
    SPrintf(str, "[%4i]", modelParam.param.count - 1);
    return str;
}


typedef struct {
    Param param("EVENT_PARAM_ST");
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i]);
        Event event;
    }
    FSeek(param.nextParamOffset);
} EventParam <read=ReadEventParam, bgcolor=cYellow>;

string ReadEventParam(EventParam& eventParam) {
    string str;
    SPrintf(str, "[%4i]", eventParam.param.count - 1);
    return str;
}


typedef struct {
    Param param("POINT_PARAM_ST");
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i]);
        Point point;
    }
    FSeek(param.nextParamOffset);
} PointParam <read=ReadPointParam, bgcolor=cAqua>;

string ReadPointParam(PointParam& pointParam) {
    string str;
    SPrintf(str, "[%4i]", pointParam.param.count - 1);
    return str;
}


typedef struct {
    Param param("ROUTE_PARAM_ST");
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i]);
        Route route;
    }
    FSeek(param.nextParamOffset);
} RouteParam <read=ReadRouteParam, bgcolor=cRed>;

string ReadRouteParam(RouteParam& routeParam) {
    string str;
    SPrintf(str, "[%4i]", routeParam.param.count - 1);
    return str;
}


typedef struct {
    Param param("LAYER_PARAM_ST");
    Assert(param.count == 1);
    FSeek(param.nextParamOffset);
} LayerParam <bgcolor=cLtGray, fgcolor=cBlack>;


typedef struct {
    Param param("PARTS_PARAM_ST");
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i]);
        Part part;
    }
    FSeek(param.nextParamOffset);
} PartsParam <read=ReadPartsParam, bgcolor=cLtBlue>;

string ReadPartsParam(PartsParam& partsParam) {
    string str;
    SPrintf(str, "[%4i]", partsParam.param.count - 1);
    return str;
}


typedef struct {
    Param param("MAPSTUDIO_PARTS_POSE_ST");
    Assert(param.count == 1);
    FSeek(param.nextParamOffset);
} MapstudioPartsPose <bgcolor=cLtGray, fgcolor=cBlack>;


typedef struct {
    Param param("MAPSTUDIO_BONE_NAME_STRING");
    Assert(param.count == 1);
    Assert(param.nextParamOffset == 0);
} MapstudioBoneName <bgcolor=cLtGray, fgcolor=cBlack>;


Header header;
ModelParam models;
EventParam events;
PointParam points;
RouteParam routes;
LayerParam layers <hidden=true>;
PartsParam parts;
MapstudioPartsPose partsPoses <hidden=true>;
MapstudioBoneName boneNames <hidden=true>;