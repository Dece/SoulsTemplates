//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: FLVERD.bt
//   Authors: TKGP
//   Version: 
//   Purpose: FromSoft models before ACE:R
//  Category: Dark Souls
// File Mask: *.flver
//  ID Bytes: 46 4C 56 45 52 00
//   History: 
//------------------------------------------------

#include "Util.bt";

LittleEndian();
if (ReadString(6, 1) == "B")
    BigEndian();

//------------------------------------------------

typedef struct {
    char magic[6]; Assert(magic == "FLVER\0");
    char endian[2]; Assert(endian == "L\0" || endian == "B\0");
    int version; Assert(version >= 0 && version < 0x10000);
    int dataOffset <format=hex>;
    int dataSize <format=hex>;
    int dummyCount;
    int materialCount;
    int boneCount;
    int meshCount;
    int bufferCount; Assert(meshCount == bufferCount);
    Vector3 boundingBoxMin;
    Vector3 boundingBoxMax;
    int unk40 <format=hex>;
    int unk44 <format=hex>;
    byte unk48 <format=hex>;
    byte unicode;
    byte unk4A;
    byte unk4B;
    int unk4C <format=hex>;
    
    local int i <hidden=true>;
    for (i = 0; i < 12; i++) {
        int unk50 <hidden=true>; Assert(unk50 == 0);
    }
} Header <bgcolor=cLtRed>;


typedef struct {
    Vector3 position;
    int unk0C; //Assert(unk0C == -1);
    Vector3 forward;
    short referenceID;
    short dummyBoneIndex;
    Vector3 upward;
    short attachBoneIndex;
    byte flag1;
    byte flag2;
    int unk30; Assert(unk30 == 0);
    int unk34; Assert(unk34 == 0);
    int unk38; Assert(unk38 == 0);
    int unk3C; Assert(unk3C == 0);
} Dummy <bgcolor=cPurple, optimize=true>;


typedef struct (Header& header) {
    OffsetString path(0, header.unicode);
    OffsetString type(0, header.unicode);
    int unk08; Assert(unk08 == 0);
    int unk0C; Assert(unk0C == 0);
} Texture;


typedef struct {
    int unk00;
    int structOffset;
    int type;
    int semantic;
    int index;
} BufferMember;


typedef struct {
    short memberCount;
    short structSize;
    int unkL04; Assert(unkL04 == 0);
    int unkL08; Assert(unkL08 == 0);
    int unkL0C; Assert(unkL0C == 0);
    BufferMember bufferMembers[memberCount];
} BufferLayout;


typedef struct (Header& header) {
    OffsetString name(0, header.unicode);
    OffsetString mtd(0, header.unicode);
    int texturesOffset <format=hex, hidden=true>;
    int bufferLayoutOffset <format=hex>;
    int dataSize <format=hex>; // From name offset to end of buffer layouts
    int bufferLayoutHeaderOffset <format=hex>;
    int unk18; Assert(unk18 == 0);
    int unk1C; Assert(unk1C == 0);

    local quad pos = FTell();
    FSeek(texturesOffset);
    byte textureCount;
    byte unkT01; Assert(unkT01 == 0);
    byte unkT02; Assert(unkT02 == 0);
    byte unkT03; Assert(unkT03 == 0);
    int unkT04; Assert(unkT04 == 0);
    int unkT08; Assert(unkT08 == 0);
    int unkT0C; Assert(unkT0C == 0);
    Texture textures(header)[textureCount] <bgcolor=cAqua, optimize=false>;

    if (bufferLayoutHeaderOffset != 0) {
    FSeek(bufferLayoutHeaderOffset);
    int layoutCount;
    int unkB04; Assert(unkB04 == FTell() + 8);
    int unkB08; Assert(unkB08 == 0);
    int unkB0C; Assert(unkB0C == 0);
    int layoutOffsets[layoutCount];
    local int i;
    for (i = 0; i < layoutCount; i++) {
        FSeek(layoutOffsets[i]);
        BufferLayout bufferLayouts <bgcolor=cSilver>;
    }
    }
    FSeek(pos);
} Material <bgcolor=cLtBlue, optimize=false>;

typedef struct (Header& header) {
    Vector3 translation;
    OffsetString name(0, header.unicode);
    Vector3 rotation;
    short parentIndex;
    short childIndex;
    Vector3 scale;
    short nextSiblingIndex;
    short previousSiblingIndex;
    Vector3 boundingBoxMin;
    int nub; Assert(nub == 0);
    Vector3 boundingBoxMax;
    
    local int i;
    for (i = 0; i < 13; i++) {
        int pad <hidden=true>; Assert(pad == 0);
    }
} Bone <bgcolor=cGray, optimize=false>;

typedef struct {
    byte dynamic; Assert(dynamic == 0 || dynamic == 1);
    byte materialIndex;
    byte unk02;
    byte unk03;
    int vertexIndexCount;
    int vertexCount;
    short boneIndices[29] <bgcolor=cGreen>;
    short unk46; Assert(unk46 == 0);
    int vertexIndicesSize <format=hex>;
    int vertexIndicesOffset <format=hex>;
    int vertexBufferSize <format=hex>;
    int vertexBufferOffset <format=hex>;
    int vertexBufferHeaderOffset <format=hex>;
    int unk5C; Assert(unk5C == 0);
    int unk60; Assert(unk60 == 0);
    
    local quad pos = FTell();
    FSeek(header.dataOffset + vertexIndicesOffset);
    ushort vertexIndices[vertexIndexCount] <bgcolor=cYellow>;
    FSeek(header.dataOffset + vertexBufferOffset);
    byte vertexBuffer[vertexBufferSize] <bgcolor=cDkYellow>;
    FSeek(pos);
} Mesh <bgcolor=cLtGreen, optimize=false>;


Header header;
struct {
    Dummy dummies[header.dummyCount];
} dummies;
struct {
    Material materials(header)[header.materialCount];
} materials;
struct {
    Bone bones(header)[header.boneCount];
} bones;
struct {
    Mesh meshes[header.meshCount];
} meshes;