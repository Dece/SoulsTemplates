//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: FLVER.bt
//   Authors: TKGP
//   Version: 
//   Purpose: FromSoft models
//  Category: Dark Souls
// File Mask: *.flv*
//  ID Bytes: 46 4C 56 45 52 00 4C 00
//   History: 
//------------------------------------------------

#include "Util.bt"

LittleEndian();
if (ReadString(6) == "B")
    BigEndian();

typedef struct {
    char magic[6]; Assert(magic == "FLVER\0");
    char endian[2]; Assert(endian == "B\0" || endian == "L\0");
    uint version;
    uint dataOffset <format=hex>;
    uint dataLength <format=hex>;
    int dummyCount;
    int materialCount;
    int boneCount;
    int meshCount;
    int vertexBufferCount;
    Vector3 boundingBoxMin;
    Vector3 boundingBoxMax;
    int unk40;
    int totalFaceCount;
    byte vertexIndexSize;
    byte unk49;
    byte unk4A;
    byte unk4B;
    short unk4C;
    short unk4E;
    int faceSetCount;
    int bufferLayoutCount;
    int textureCount;
    int unk5C;
    int unk60 <hidden=true>; Assert(unk60 == 0);
    int unk64 <hidden=true>; Assert(unk64 == 0);
    int flags68;
    int unk6C <hidden=true>; Assert(unk6C == 0);
    int unk70 <hidden=true>; Assert(unk70 == 0);
    int unk74 <hidden=true>; Assert(unk74 == 0);
    int unk78 <hidden=true>; Assert(unk78 == 0);
    int unk7C <hidden=true>; Assert(unk7C == 0);
} Header <bgcolor=cLtRed>;


typedef struct {
    Vector3 position;
    int unk0C;
    Vector3 forward;
    short referenceID;
    short dummyBoneIndex;
    Vector3 upward;
    short attachBoneIndex;
    byte unk2E;
    byte unk2F;
    int unk30;
    int unk34;
    int unk38 <hidden=true>; Assert(unk38 == 0);
    int unk3C <hidden=true>; Assert(unk3C == 0);
} Dummy <bgcolor=cLtGreen, optimize=false>;


typedef struct {
    uint unk00 <format=hex>;
    int unk04 <format=hex>;
    int length <format=hex>;
    
    if (length > 0xC)
        ubyte unk0C[length - 0xC];
} GXItem <optimize=false>;

typedef struct {
    OffsetString name(0, 1);
    OffsetString mtd(0, 1);
    int textureCount;
    int textureIndex;
    uint flags;
    uint gxOffset <format=hex>;
    int unk18;
    int unk1C <hidden=true>; Assert(unk1C == 0);
    
    if (gxOffset != 0) {
        local quad pos <hidden=true> = FTell();
        FSeek(gxOffset);
        struct {
            do {
                GXItem gxItem;
            } while(gxItem.unk00 != 0x7FFFFFFF);
        } gxItems;
        FSeek(pos);
    }
} Material <read=ReadMaterial, bgcolor=cGreen, optimize=false>;

wstring ReadMaterial(Material& mat) {
    return mat.name.str + " | " + mat.mtd.str;
}


typedef struct {
    Vector3 translation;
    OffsetString name(0, 1);
    Vector3 rotation;
    short parentIndex;
    short childIndex;
    Vector3 scale;
    short nextSiblingIndex;
    short previousSiblingIndex;
    Vector3 boundingBoxMin;
    int unk3C;
    Vector3 boundingBoxMax;
    
    local int i <hidden=true>;
    for (i = 0; i < 13; i++) {
        int unk4C <hidden=true>; Assert(unk4C == 0);
    }
} Bone <read=ReadBone, bgcolor=cDkGreen, optimize=false>;

wstring ReadBone(Bone& bone) {
    return bone.name.str;
}


typedef struct (Header& header) {
    int dynamic; Assert(dynamic == 0 || dynamic == 1);
    int materialIndex;
    int unk08; Assert(unk08 == 0);
    int unk0C; Assert(unk0C == 0);
    int defaultBoneIndex;
    int boneCount;
    uint boundingBoxOffset <format=hex>;
    uint boneIndicesOffset <format=hex>;
    int faceSetCount;
    uint faceSetIndicesOffset <format=hex>;
    int vertexBufferCount;
    uint vertexBufferIndicesOffset <format=hex>;
    
    local quad pos <hidden=true> = FTell();
    if (boundingBoxOffset != 0) {
        FSeek(boundingBoxOffset);
        Vector3 boundingBoxMin;
        Vector3 boundingBoxMax;
        if (header.version >= 0x2001A)
            Vector3 boundingBoxUnk;
    }
    if (boneCount > 0) {
        FSeek(boneIndicesOffset);
        int boneIndices[boneCount];
    }
    FSeek(faceSetIndicesOffset);
    int faceSetIndices[faceSetCount];
    FSeek(vertexBufferIndicesOffset);
    int vertexBufferIndices[vertexBufferCount];
    FSeek(pos);
} Mesh <bgcolor=cAqua, optimize=false>;


typedef struct (Header& header) {
    uint flags;
    byte triangleStrip;
    byte cullBackFaces;
    short unk06;
    int vertexCount;
    uint vertexIndicesOffset <format=hex>;
    int vertexIndicesLength <format=hex>;
    int unk14 <hidden=true>; Assert(unk14 == 0);
    int vertexIndexSize;
    int unk1C <hidden=true>; Assert(unk1C == 0);
    
    local quad pos <hidden=true> = FTell();
    FSeek(header.dataOffset + vertexIndicesOffset);
    if (vertexIndexSize == 0 || vertexIndexSize == 16) {
        ushort vertexIndices[vertexCount];
    } else if (vertexIndexSize == 32) {
        uint vertexIndices[vertexCount];
    }
    FSeek(pos);
} FaceSet <bgcolor=cDkAqua, optimize=false>;


typedef struct (Header& header) {
    int bufferIndex;
    int layoutIndex;
    int vertexSize;
    int vertexCount;
    int unk10 <hidden=true>; Assert(unk10 == 0);
    int unk14 <hidden=true>; Assert(unk14 == 0);
    uint verticesLength <format=hex>;
    uint bufferOffset <format=hex>;
    
    local quad pos <hidden=true> = FTell();
    FSeek(header.dataOffset + bufferOffset);
    ubyte buffer[verticesLength];
    FSeek(pos);
} VertexBuffer <bgcolor=cLtBlue, optimize=false>;


typedef struct {
    int unk00;
    int structOffset <format=hex>;
    uint type;
    uint semantic;
    int index;
} LayoutMember <read=ReadLayoutMember>;

string ReadLayoutMember(LayoutMember& member) {
    string str;
    SPrintf(str, "%2X %2X", member.type, member.semantic);
    return str;
}

typedef struct {
    int memberCount;
    int unk04 <hidden=true>; Assert(unk04 == 0);
    int unk08 <hidden=true>; Assert(unk08 == 0);
    uint membersOffset <format=hex>;
    
    local quad pos <hidden=true> = FTell();
    FSeek(membersOffset);
    LayoutMember members[memberCount];
    FSeek(pos);
} BufferLayout <bgcolor=cBlue, optimize=false>;


typedef struct {
    OffsetString path(0, 1);
    OffsetString type(0, 1);
    Vector2 scale;
    int unk10;
    int unk14 <hidden=true>; Assert(unk14 == 0);
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1C <hidden=true>; Assert(unk1C == 0);
} Texture <read=ReadTexture, bgcolor=cDkBlue, optimize=false>;

wstring ReadTexture(Texture& tex) {
    return tex.type.str + " | " + tex.path.str;
}


typedef struct {
    short unk00[4];
    int index;
    int unk0C <hidden=true>; Assert(unk0C == 0);
} UnkThingMember <optimize=false>;

typedef struct {
    short count1;
    short count2;
    uint offset1 <format=hex>;
    uint offset2 <format=hex>;
    int unk0C <hidden=true>; Assert(unk0C == 0);
    int unk10 <hidden=true>; Assert(unk10 == 0);
    int unk14 <hidden=true>; Assert(unk14 == 0);
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1C <hidden=true>; Assert(unk1C == 0);
    
    local quad pos <hidden=true> = FTell();
    FSeek(offset1);
    struct { UnkThingMember members1[count1]; } members1;
    FSeek(offset2);
    struct { UnkThingMember members2[count2]; } members2;
    FSeek(pos);
} UnkThing <bgcolor=cDkPurple, optimize=false>;


Header header;
if (header.dummyCount > 0)
    struct { Dummy dummies[header.dummyCount]; } dummies;
if (header.materialCount > 0)
    struct { Material materials[header.materialCount]; } materials;
if (header.boneCount > 0)
    struct { Bone bones[header.boneCount]; } bones;
if (header.meshCount > 0)
    struct { Mesh meshes(header)[header.meshCount]; } meshes;
if (header.faceSetCount > 0)
    struct { FaceSet faceSets(header)[header.faceSetCount]; } faceSets;
if (header.vertexBufferCount > 0)
    struct { VertexBuffer vertexBuffers(header)[header.vertexBufferCount]; } vertexBuffers;
if (header.bufferLayoutCount > 0)
    struct { BufferLayout bufferLayouts[header.bufferLayoutCount]; } bufferLayouts;
if (header.textureCount > 0)
    struct { Texture textures[header.textureCount]; } textures;
if (header.version >= 0x2001A)
    UnkThing unkThing;