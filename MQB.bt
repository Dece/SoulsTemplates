//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: MQB.bt
//   Authors: TKGP
//   Version: 1.01
//   Purpose: DS3 cutscene definition files
//  Category: Dark Souls
// File Mask: *.mqb
//  ID Bytes: 4D 51 42 20 00 00 00 00 CC 00 00 00 24 00 00 00
//   History: 
//------------------------------------------------

typedef struct {
    char magic[4]; Assert(magic == "MQB ");
    int unk04; Assert(unk04 == 0);
    int unk08; Assert(unk08 == 0xCC);
    int unk0C; Assert(unk0C == 0x24);
    int resourceStringsOffset <format=hex>;
    int unk14; Assert(unk14 == 1);
    int unk18; Assert(unk18 == 0);
    int unk1C; Assert(unk1C == 0);
    int unk20; Assert(unk20 == 0);
    wchar_t name[0x20] <fgcolor=cGreen>;
    float framerate; // Framerate of events; always 30 in vanilla
    int resourceCount;
    int cutCount;
    int unk70; Assert(unk70 == 0);
    int unk74; Assert(unk74 == 0);
    int unk78; Assert(unk78 == 0);
    int unk7C; Assert(unk7C == 0);
    int unk80; Assert(unk80 == 0);
} Header <read=ReadHeader>;

wstring ReadHeader(Header& header) {
    string str;
    SPrintf(str, "%f ", header.framerate);
    return str + header.name;
}


typedef struct {
    wchar_t str[0x20] <fgcolor=cGreen>;
    int parentIndex; // Not really sure, but seems right; -1 for none
    int index;
    int unk48; // Not another index
    int unk4C; Assert(unk4C == 0);
} Resource <read=ReadResource>;

wstring ReadResource(Resource& resource) {
    string str;
    SPrintf(str, "%3i %3i %3i ",
        resource.parentIndex, resource.index, resource.unk48);
    return str + resource.str;
}

typedef struct (int count) {
    local int count <hidden=true> = count;
    Resource resources[count] <optimize=false>;
} Resources <read=ReadResources>;

wstring ReadResources(Resources& resources) {
    string str;
    SPrintf(str, "[%i]", resources.count);
    return str;
}


// floats that are always 0 were sometimes -0
// ints that are always 0 are probably floats too but always +0 so I can't tell
typedef struct {
    float unk00;
    float unk04; // X
    float unk08; // Y
    float unk0C; // Z
    float unk10; Assert(unk10 == 0);
    float unk14; Assert(unk14 == 0);
    float unk18; Assert(unk18 == 0);
    int unk1C; Assert(unk1C == 0);
    float unk20; Assert(unk20 == 0);
    int unk24; Assert(unk24 == 0);
    float unk28;
    float unk2C;
    float unk30;
    float unk34; Assert(unk34 == 0);
    float unk38; Assert(unk38 == 0);
    float unk3C; Assert(unk3C == 0);
    float unk40; Assert(unk40 == 0);
    float unk44; Assert(unk44 == 0);
    float unk48; Assert(unk48 == 0);
    float unk4C; Assert(unk4C == 1);
    float unk50; Assert(unk50 == 1);
    float unk54; Assert(unk54 == 1);
    float unk58; Assert(unk58 == 0);
    float unk5C; Assert(unk5C == 0);
    float unk60; Assert(unk60 == 0);
    int unk64; Assert(unk64 == 0);
    int unk68; Assert(unk68 == 0);
    int unk6C; Assert(unk6C == 0);
} UnkFloats <read=ReadUnkFloats>;

wstring ReadUnkFloats(UnkFloats& floats) {
    string str;
    SPrintf(str, "%5.1f <%.3f, %.3f, %.3f> %f", floats.unk00,
        floats.unk04, floats.unk08, floats.unk0C, floats.unk2C);
    return str;
}


typedef struct {
    float unk00;
    int unk04; Assert(unk04 == 0);
    int unk08;
    int unk0C; Assert(unk0C == 0);
} ParamUnk2_1;

typedef struct {
    int unk00 <format=hex>;
    int unk04; Assert(unk04 == 0);
    int unk08;
    int unk0C; Assert(unk0C == 0);
    float unk10;
    float unk14;
} ParamUnk2_2;


typedef struct {
    int unk00; Assert(unk00 == 0x1C);
    int unk2Count;
    int unk08; Assert(unk08 == 3 || unk08 == 8);
    int unk0C; Assert(unk0C == 1 || unk0C == 2);
    int unk10; Assert(unk10 == (unk0C == 1 ? 0x10 : 0x18));
    int unk2Offset <format=hex>;
    // An offset back to the value in the parent Param
    // For colors, each ParamUnk1 points to a separate byte of the RGB value
    int parentOffset <format=hex>;
    
    local quad pos <hidden=true> = FTell();
    FSeek(unk2Offset);
    if (unk0C == 1) {
        ParamUnk2_1 paramUnk2s[unk2Count] <bgcolor=cPurple, optimize=false>;
    } else if (unk0C == 2) {
        ParamUnk2_2 paramUnk2s[unk2Count] <bgcolor=cPurple, optimize=false>;
    }
    FSeek(pos);
} ParamUnk1;


typedef struct {
    wchar_t name[0x20] <fgcolor=cGreen>;
    //  1 - bool
    //  3 - 
    //  4 - short
    //  6 - int
    //  7 - 
    //  8 - float
    // 10 - string
    // 13 - color
    int type; Assert(type == 1 || type == 3 || type == 4 || type == 6
        || type == 7 || type == 8 || type == 10 || type == 13);
    int unk44; Assert(unk44 == (type == 13 ? 3 : 0));
    int unk48 <format=hex>;
    int unk4C; Assert(unk4C == 0);
    int unk1Offset <format=hex>;
    int unk1Count;
    if (type != 8 && type != 13)
        Assert(unk1Offset == 0 && unk1Count == 0);
    int unk58; Assert(unk58 == 0);
    int unk5C; Assert(unk5C == 0);
    
    if (type == 10) {
        wchar_t str[unk48 / 2] <fgcolor=cLtGreen>;
    } else if (type == 13) {
        int unk60 <format=hex>;
    }

    if (unk1Count > 0) {
        local quad pos <hidden=true> = FTell();
        FSeek(unk1Offset);
        ParamUnk1 paramUnk1s[unk1Count] <optimize=false>;
        FSeek(pos);
    }
} Param <read=ReadParam>;

wstring ReadParam(Param& param) {
    string str;
    SPrintf(str, "%2i %i %8X %i %5X %i ", param.type, param.unk44,
        param.unk48, param.unk4C, param.unk1Offset, param.unk1Count);
    return str + param.name;
}


typedef struct {
        int camDispositionID;
        int resourceIndex;
        int groupIndex;
            int unk0C;
            int unk10;
            int unk14; Assert(unk14 == 0);
            int unk18;
            int unk1C;
            int unk20; Assert(unk20 == 0 || unk20 == 1);
        int paramCount;
        int unk28;
        int unk2C; Assert(unk2C == 0);
        
        if (paramCount > 0) {
            Param params[paramCount] <bgcolor=cLtBlue, optimize=false>;
        }
        
        int unkX00; Assert(unkX00 == 0); // Unused flags
        // 0x01 - cam something, uses unkX14
        // 0x20 - 
        // 0x40 - use cam correction, 4 floats at unkfloats 0x38
        int unkFloatsCount;
        int unkX08; Assert(unkX08 == 0);
        int unkX0C; Assert(unkX0C == 0);
        int unkX10; Assert(unkX10 == 0);
        int unkX14; Assert(unkX14 == 0);
        int unkX18; Assert(unkX18 == 0);
        int unkX1C; Assert(unkX1C == 0);
        
        UnkFloats unkFloats[unkFloatsCount] <bgcolor=cDkAqua, optimize=false>;
} Entry <read=ReadEntry>;

wstring ReadEntry(Entry& entry) {
    string str;
    SPrintf(str, "[%2i][%i] %4i %3i %2i %3i %3i %3i %3i %2i", entry.paramCount, entry.unkFloatsCount,
        entry.camDispositionID, entry.resourceIndex, entry.groupIndex, entry.unk0C,
        entry.unk10, entry.unk18, entry.unk1C, entry.unk28);
    return str;
}


typedef struct {
    wchar_t str[0x20];
    int unk40;
    int unk44; Assert(unk44 == 0);
    int unk48;
    int unk4C; Assert(unk4C == 0);
    int unk50; Assert(unk50 == 0);
    int unk54; Assert(unk54 == 0);
    int unk58; Assert(unk58 == 0);
    int unk5C; Assert(unk5C == 0);
} UnkGroupStr <read=ReadUnkGroupStr, optimize=false>;

wstring ReadUnkGroupStr(UnkGroupStr& ugs) {
    return ugs.str;
}


typedef struct {
    int entryOffsetsOffset <format=hex>;
    int entryCount;
    int unkStrsOffset <format=hex>;
    int unkStrCount;
    int unk10;
    
    local quad pos <hidden=true> = FTell();
    if (entryCount > 0) {
        FSeek(entryOffsetsOffset);
        int entryOffsets[entryCount] <format=hex>;
    }
    if (unkStrCount > 0) {
        FSeek(unkStrsOffset);
        struct { UnkGroupStr unkStrs[unkStrCount]; } unkStrs;
    }
    FSeek(pos);
} Group <read=ReadGroup>;

wstring ReadGroup(Group& group) {
    string str;
    SPrintf(str, "%5X[%i] %5X[%2i] %2i", group.entryOffsetsOffset, group.entryCount,
        group.unkStrsOffset, group.unkStrCount, group.unk10);
    return str;
}


typedef struct {
    wchar_t str[0x20] <fgcolor=cGreen>;
    int entryCount;
    int unk44; // Usually 0, not always
    int unk48; // Frame count?
    int unk4C; Assert(unk4C == 0);
    int groupCount;
    int groupsOffset <format=hex>;
    int unk58; Assert(unk58 == 0);
    int unk5C; Assert(unk5C == 0);
    
    struct Entries {
        Entry entries[entryCount] <optimize=false>;
    } entries <bgcolor=cLtYellow>;

    local quad pos <hidden=true> = FTell();
    FSeek(groupsOffset);
    struct Groups {
        Group groups[groupCount] <optimize=false>;
    } groups;
    FSeek(pos);
} Cut <read=ReadCut>;

wstring ReadCut(Cut& cut) {
    string str;
    SPrintf(str, "%i %4i ", cut.unk44, cut.unk48);
    return str + cut.str;
}

typedef struct (int count) {
    local int count <hidden=true> = count;
    Cut cuts[count] <optimize=false>;
} Cuts <read=ReadCuts>;

wstring ReadCuts(Cuts& cuts) {
    string str;
    SPrintf(str, "[%i]", cuts.count);
    return str;
}


typedef struct {
    int offset;
    if (offset != 0) {
        local quad pos <hidden=true> = FTell();
        FSeek(offset);
        wstring str <bgcolor=cLtGreen>;
        FSeek(pos);
    }
} ResourceString <read=ReadResourceString>;

wstring ReadResourceString(ResourceString& str) {
    if (str.offset == 0)
        return "<null>";
    else
        return str.str;
}

typedef struct (int count) {
    local int count <hidden=true> = count;
    ResourceString resourceStrings[count] <optimize=false>;
} ResourceStrings <read=ReadResourceStrings>;

wstring ReadResourceStrings(ResourceStrings& resourceStrings) {
    string str;
    SPrintf(str, "[%i]", resourceStrings.count);
    return str;
}


Header header <bgcolor=cLtRed>;
Resources resources(header.resourceCount) <bgcolor=cAqua>;
Cuts cuts(header.cutCount) <bgcolor=cYellow>;

FSeek(header.resourceStringsOffset);
ResourceStrings resourceStrings(header.resourceCount) <bgcolor=cGreen>;