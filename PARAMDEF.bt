//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: PARAMDEF.bt
//   Authors: TKGP
//   Version: 
//   Purpose: Companion file that describes a param's row data structure
//  Category: Dantelion
// File Mask: *.def,*.paramdef
//  ID Bytes: 
//   History: 
//------------------------------------------------

LittleEndian();
if (ReadByte(0x2C) == -1)
    BigEndian();

//------------------------------------------------

typedef struct {
    int fileSize <format=hex>;
    // Header size, or just a short fields offset? Who knows.
    short headerSize <format=hex>; Assert(headerSize == 0x30 || headerSize == 0xFF);
    // Incremented when the actual param data structure changes
    short dataVersion;
    short fieldCount;
    short fieldSize <format=hex>; Assert(fieldSize == 0x6C || fieldSize == 0x8C
        || fieldSize == 0xAC || fieldSize == 0xB0 || fieldSize == 0xD0);

    char paramID[0x20] <bgcolor=cRed>;
    byte bigEndian; Assert(bigEndian == 0 || bigEndian == -1);
    byte unicode; Assert(unicode == 0 || unicode == 1);
    short formatVersion; Assert(formatVersion == 101 || formatVersion == 102
        || formatVersion == 103 || formatVersion == 104 || formatVersion == 201);

    if (formatVersion >= 201) {
        quad fieldsOffset <format=hex>; Assert(fieldsOffset == 0x38);
    }
} Header <bgcolor=cLtRed>;


typedef struct {
    if (header.unicode)
        wchar_t displayName[0x20] <bgcolor=cGreen>;
    else
        char displayName[0x40] <bgcolor=cGreen>;

    char displayType[0x8] <bgcolor=cGreen>;
    char displayFormat[0x8] <bgcolor=cGreen>;
    float defaultValue;
    float minValue;
    float maxValue;
    float increment;
    enum <int> { EDIT_WRAP = 1, EDIT_LOCK = 4 } editFlags;
    int byteCount;
    
    if (header.formatVersion < 201)
        int descriptionOffset <format=hex>;
    else
        quad descriptionOffset <format=hex>;

    if (descriptionOffset != 0) {
        local quad pos <hidden=true> = FTell();
        FSeek(descriptionOffset);
        if (header.unicode)
            wstring description <bgcolor=cGreen>;
        else
            string description <bgcolor=cGreen>;
        FSeek(pos);
    }

    char internalType[0x20] <bgcolor=cGreen>;
    
    if (header.formatVersion >= 102) {
        char internalName[0x20] <bgcolor=cGreen>;
    }

    if (header.formatVersion >= 104) {
        int sortID;
    }

    if (header.formatVersion >= 201) {
        int unkB4 <hidden=true>; Assert(unkB4 == 0);
        int unkB8 <hidden=true>; Assert(unkB8 == 0);
        int unkBC <hidden=true>; Assert(unkBC == 0);
        int unkC0 <hidden=true>; Assert(unkC0 == 0);
        int unkC4 <hidden=true>; Assert(unkC4 == 0);
        int unkC8 <hidden=true>; Assert(unkC8 == 0);
        int unkCC <hidden=true>; Assert(unkCC == 0);
    }
} Field <read=ReadField, bgcolor=cLtGreen, optimize=false>;

wstring ReadField(Field &field) {
    string str;
    SPrintf(str, "%i ", field.editFlags);
    str += field.internalType;
    if (exists(field.internalName))
        str += " - " + field.internalName;
    str += " | " + field.displayType + " - ";
    if (header.unicode)
        return str + field.displayName;
    else
        return str + StringToWString(field.displayName, CHARSET_JAPANESE);
}

//------------------------------------------------

Header header;
struct { Field fields[header.fieldCount]; } fields <open=true>;
