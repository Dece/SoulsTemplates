//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: MSBS\Part.bt
//   Authors: TKGP
//   Version: 
//   Purpose: Sekiro map layout parts
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

enum <int> PartType {
    PartTypeMapPiece = 0,
    PartTypeObject = 1,
    PartTypeEnemy = 2,
    //PartTypeItem = 3,
    PartTypePlayer = 4,
    PartTypeCollision = 5,
    //PartTypeNPCWander = 6,
    //PartTypeProtoboss = 7,
    //PartTypeNavmesh = 8,
    PartTypeDummyObject = 9,
    PartTypeDummyEnemy = 10,
    PartTypeConnectCollision = 11,
};

struct PartUnk1;
struct PartUnk2;
struct PartMapPiece;
struct PartObject;
struct PartEnemy;
struct PartPlayer;
struct PartCollision;
struct PartConnectCollision;
struct PartUnk5;
struct PartUnk6;
struct PartUnk7;

typedef struct {
    local quad start <hidden=true> = FTell();

    quad nameOffset <format=hex, hidden=true>;
    PartType type;
    int id;
    int modelIndex;
    int unk14 <hidden=true>; Assert(unk14 == 0);
    quad sibOffset <format=hex, hidden=true>;
    Vector3 position;
    Vector3 rotation;
    Vector3 scale;
    int unk44 <hidden=true>; Assert(unk44 == -1);
    int mapStudioLayer <hidden=true>; Assert(mapStudioLayer == -1);
    int unk4C <hidden=true>; Assert(unk4C == 0);
    quad unkOffset1 <format=hex>;
    quad unkOffset2 <format=hex>;
    quad entityDataOffset <format=hex>; Assert(entityDataOffset != 0);
    quad typeDataOffset <format=hex>; Assert(typeDataOffset != 0);
    quad unkOffset5 <format=hex>;
    quad unkOffset6 <format=hex>;
    quad unkOffset7 <format=hex>;
    quad unk88 <hidden=true>; Assert(unk88 == 0);
    quad unk90 <hidden=true>; Assert(unk90 == 0);
    quad unk98 <hidden=true>; Assert(unk98 == 0);
    
    if (type == PartTypeMapPiece || type == PartTypeObject || type == PartTypeEnemy
        || type == PartTypeCollision) {
        Assert(unkOffset1 != 0);
    } else {
        Assert(unkOffset1 == 0);
    }
    
    if (type == PartTypeCollision || type == PartTypeConnectCollision) {
        Assert(unkOffset2 != 0);
    } else {
        Assert(unkOffset2 == 0);
    }
    
    if (type == PartTypeMapPiece || type == PartTypeObject || type == PartTypeEnemy
        || type == PartTypeCollision || type == PartTypeDummyObject
        || type == PartTypeDummyEnemy) {
        Assert(unkOffset5 != 0);
    } else {
        Assert(unkOffset5 == 0);
    }
    
    if (type == PartTypeCollision) {
        Assert(unkOffset6 != 0);
        Assert(unkOffset6 - unkOffset5 == 0x20);
    } else {
        Assert(unkOffset6 == 0);
    }
    
    if (type == PartTypeMapPiece) {
        Assert(unkOffset7 != 0);
        Assert(unkOffset7 - unkOffset5 == 0x20);
    } else {
        Assert(unkOffset7 == 0);
    }
    
    FSeek(start + nameOffset);
    wstring name;
    FSeek(start + sibOffset);
    wstring sib;
    
    if (unkOffset1 != 0) {
        FSeek(start + unkOffset1);
        PartUnk1 unk1;
    }
    
    if (unkOffset2 != 0) {
        FSeek(start + unkOffset2);
        PartUnk2 unk2;
    }
    
    FSeek(start + entityDataOffset);
    int entityID;
    int unkE04;
    int unkE08;
    int unkE0C;
    int unkE10;
    int unkE14;
    int unkE18;
    int entityGroupIDs[8];
    int unkE3C;
    int unkE40;
    int unkE44 <hidden=true>; Assert(unkE44 == 0);
    int unkE48 <hidden=true>; Assert(unkE48 == 0);
    int unkE4C <hidden=true>; Assert(unkE4C == 0);
    int unkE50 <hidden=true>; Assert(unkE50 == 0);
    // pad to 8
    
    FSeek(start + typeDataOffset);
    switch (type) {
        case PartTypeMapPiece: PartMapPiece mapPiece; break;
        case PartTypeObject:
        case PartTypeDummyObject: PartObject object; break;
        case PartTypeEnemy:
        case PartTypeDummyEnemy: PartEnemy enemy; break;
        case PartTypePlayer: PartPlayer player; break;
        case PartTypeCollision: PartCollision collision; break;
        case PartTypeConnectCollision: PartConnectCollision connectCollision; break;
    }
    
    if (unkOffset5 != 0) {
        FSeek(start + unkOffset5);
        PartUnk5 unk5;
    }

    if (unkOffset6 != 0) {
        FSeek(start + unkOffset6);
        PartUnk6 unk6;
    }

    if (unkOffset7 != 0) {
        FSeek(start + unkOffset7);
        PartUnk7 unk7;
    }
} Part <read=ReadPart>;

wstring ReadPart(Part& part) {
    string str;
    SPrintf(str, "%i ", part.type);
    return str + part.name;
}


typedef struct {
    uint collisionMask[48];
    byte condition1;
    byte condition2;
    short pad <hidden=true>; Assert(pad == 0);
    
    local int i <hidden=true>;
    for (i = 0; i < 48; i++) {
        int zero <hidden=true>; Assert(zero == 0);
    }
} PartUnk1;


typedef struct {
    int condition;
    int dispGroups[8];
    short unk24;
    short unk26;
    int unk28; Assert(unk28 == 0);
    int unk2C; Assert(unk2C == 0);
    int unk30; Assert(unk30 == 0);
    int unk34; Assert(unk34 == 0);
    int unk38; Assert(unk38 == 0);
    int unk3C; Assert(unk3C == 0);
    int unk40; Assert(unk40 == 0);
    int unk44; Assert(unk44 == 0);
} PartUnk2;


typedef struct {
    int unk00; Assert(unk00 == 0);
    int unk04; Assert(unk04 == 0);
} PartMapPiece;


typedef struct {
    int unk00; Assert(unk00 == 0);
    int unk04; Assert(unk04 == 0);
    int unk08;
    int unk0C;
    short unk10;
    short unk12; Assert(unk12 == -1);
    int unk14; Assert(unk14 == -1);
    short unk18;
    short unk1A;
    int unk1C; Assert(unk1C == -1);
    int unk20;
    int unk24;
} PartObject;


typedef struct {
    int unk00; Assert(unk00 == 0);
    int unk04; Assert(unk04 == 0);
    int unk08;
    int unk0C;
    int unk10;
    short unk14; Assert(unk14 == 0);
    short unk16;
    int unk18;
    int unk1C;
    short unk20;
    short unk22;
    int unk24;
    int unk28; Assert(unk28 == -1);
    int unk2C; Assert(unk2C == -1);
    int unk30; Assert(unk30 == -1);
    int unk34; Assert(unk34 == -1);
    int unk38;
    int unk3C; Assert(unk3C == -1);
    int unk40;
    int unk44;
    int unk48;
    int unk4C;
    int unk50;
    int unk54; Assert(unk54 == 1);
    int unk58; Assert(unk58 == -1);
    int unk5C; Assert(unk5C == 1);
    int unk60; Assert(unk60 == 0);
    int unk64; Assert(unk64 == 0);
    int unk68; Assert(unk68 == 0);
    int unk6C; Assert(unk6C == 0);
    int unk70; Assert(unk70 == 0);
    int unk74; Assert(unk74 == 0);
    int unk78;
    int unk7C; Assert(unk7C == 0);
    int unk80; Assert(unk80 == 0);
    float unk84;
    int unk88; Assert(unk88 == -1);
    short unk8C; Assert(unk8C == -1);
    short unk8E; Assert(unk8E == 0xA);
    int unk90; Assert(unk90 == -1);
    short unk94; Assert(unk94 == -1);
    short unk96; Assert(unk96 == 0xA);
    int unk98; Assert(unk98 == -1);
    short unk9C; Assert(unk9C == -1);
    short unk9E; Assert(unk9E == 0xA);
    int unkA0; Assert(unkA0 == -1);
    short unkA4; Assert(unkA4 == -1);
    short unkA6; Assert(unkA6 == 0xA);
    int unkA8; Assert(unkA8 == -1);
    short unkAC; Assert(unkAC == -1);
    short unkAE; Assert(unkAE == 0xA);
    int unkB0; Assert(unkB0 == 0);
    int unkB4; Assert(unkB4 == 0);
    int unkB8; Assert(unkB8 == 0);
    int unkBC; Assert(unkBC == 0);
} PartEnemy;


typedef struct {
    int unk00; Assert(unk00 == 0);
    int unk04; Assert(unk04 == 0);
    int unk08; Assert(unk08 == 0);
    int unk0C; Assert(unk0C == 0);
} PartPlayer;


typedef struct {
    byte hitFilterID;
    byte soundSpaceType;
    short envLightMapSpotIndex; Assert(envLightMapSpotIndex == 0);
    float reflectPlaneHeight;
    int unk08; Assert(unk08 == -1); // vagrant entity IDs
    int unk0C; Assert(unk0C == -1);
    int unk10; Assert(unk10 == -1);
    short mapNameID;
    byte disableStart;
    byte unk17;
    int disableBonfireEntityID;
    int unk1C; Assert(unk1C == -1);
    int unk20; Assert(unk20 == -1);
    byte unk24;
    byte unk25;
    byte unk26;
    byte mapVisibility;
    int playRegionID;
    short lockCamParamID1;
    short lockCamParamID2; Assert(lockCamParamID2 == -1);
    int unk30; Assert(unk30 == -1);
    int unk34; Assert(unk34 == -1);
    int unk38; Assert(unk38 == -1);
    int unk3C;
    int unk40;
    float unk44;
    float unk48;
    int unk4C;
    float unk50;
    float unk54;
    int unk58; Assert(unk58 == 0);
    int unk5C; Assert(unk5C == 0);
} PartCollision;


typedef struct {
    int collisionIndex;
    byte mapID[4];
    int unk08; Assert(unk08 == 0);
    int unk0C; Assert(unk0C == 0);
} PartConnectCollision;


typedef struct {
    int unk00;
    int unk04;
    int unk08;
    int unk0C;
    int unk10; Assert(unk10 == 0);
    int unk14; Assert(unk14 == 0);
    int unk18; Assert(unk18 == 0);
    int unk1C; Assert(unk1C == 0);
} PartUnk5;


typedef struct {
    int unk00; Assert(unk00 == 0);
    int unk04; Assert(unk04 == 0);
    int unk08; Assert(unk08 == 0);
    int unk0C; Assert(unk0C == 0);
    int unk10; Assert(unk10 == 0);
    int unk14; Assert(unk14 == 0);
    int unk18; Assert(unk18 == 0);
    int unk1C; Assert(unk1C == 0);
    int unk20; Assert(unk20 == 0);
    int unk24; Assert(unk24 == 0);
    int unk28; Assert(unk28 == 0);
    int unk2C; Assert(unk2C == 0);
    int unk30; Assert(unk30 == 0);
    int unk34; Assert(unk34 == 0);
    int unk38; Assert(unk38 == 0);
    int unk3C;
    float unk40;
    int unk44; Assert(unk44 == 0);
    int unk48; Assert(unk48 == 0);
    int unk4C; Assert(unk4C == 0);
} PartUnk6;


typedef struct {
    int unk00;
    int unk04;
    int unk08;
    int unk0C;
    int unk10;
    int unk14;
    int unk18; Assert(unk18 == -1);
    int unk1C; Assert(unk1C == 0);
} PartUnk7;