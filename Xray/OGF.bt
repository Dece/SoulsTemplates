//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: Xray\OGF.bt
//   Authors: TKGP
//   Version: 
//   Purpose: Xray standard model files
//  Category: Xray
// File Mask: *.ogf
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "..\Util.bt"
#include "XrayUtil.bt"

//------------------------------------------------

typedef struct {
    Block block(1);
    byte unk00;
    byte unk01;
    short unk02;
    Vector3 unk04;
    Vector3 unk10;
    int unk1C;
    Vector3 unk20;
    Assert(FTell() == block.end);
} Block1;


typedef struct {
    Block block(2);
    string texture;
    string shader;
    Assert(FTell() == block.end);
} Material <read=ReadMaterial>;

string ReadMaterial(Material& mat) {
    string str;
    return SPrintf(str, "%s - %s", mat.shader, mat.texture);
}


typedef struct {
    Vector3 position;
    Vector3 normal;
    Vector3 tangent; // Not verified
    Vector3 binormal; // ""
    Vector2 uv;
    int boneIndex; // Not verified
} Vertex1;

typedef struct {
    short boneIndex1;
    short boneIndex2;
    Vector3 position;
    Vector3 normal;
    Vector3 tangent;
    Vector3 binormal;
    float boneWeight;
    Vector2 uv;
} Vertex2;

typedef struct {
    short boneIndex1;
    short boneIndex2;
    short boneIndex3;
    Vector3 position;
    Vector3 normal;
    Vector3 tangent;
    Vector3 binormal;
    float boneWeight1;
    float boneWeight2;
    Vector2 uv;
} Vertex3;

typedef struct {
    short boneIndex1;
    short boneIndex2;
    short boneIndex3;
    short boneIndex4;
    Vector3 position;
    Vector3 normal;
    Vector3 tangent;
    Vector3 binormal;
    float boneWeight1;
    float boneWeight2;
    float boneWeight3;
    Vector2 uv;
} Vertex4;

typedef struct {
    Block block(3);
    int format <format=hex>;
    int vertexCount;
    if (format == 1 || format == 0x12071980)
        Vertex1 vertices[vertexCount];
    else if (format == 2 || format == 0x240E3300)
        Vertex2 vertices[vertexCount];
    else if (format == 3)
        Vertex3 vertices[vertexCount];
    else if (format == 4)
        Vertex4 vertices[vertexCount];
    else
        Assert(false);
    Assert(FTell() == block.end);
} VertexBlock <bgcolor=cAqua>;


typedef struct {
    Block block(4);
    int indexCount;
    ushort indices[indexCount];
    Assert(FTell() == block.end);
} IndexBlock <bgcolor=cPurple>;


typedef struct {
    Block block(6);
    int unk00;
    int unk04;
    int unk08;
    int unk0C;
    int unkCount;
    
    struct Unk {
        int unk00;
        int unk04;
    } unks[unkCount];
    Assert(FTell() == block.end);
} Block6 <bgcolor=cRed>;


typedef struct {
    int index;
    int length <format=hex>;
    Block1 block1;
    Material material;
    VertexBlock vertices;
    IndexBlock indices;
    if (block1.unk01 == 4)
        Block6 block6;
} Mesh;


typedef struct {
    Block block(9);
    while (FTell() < block.end) {
        Mesh meshes;
    }
    Assert(FTell() == block.end);
} MeshesBlock <bgcolor=cLtGreen>;


typedef struct {
    string name;
    string parentName;
    float unkX00;
    int unkX04;
    int unkX08;
    int unkX0C;
    float unkX10;
    int unkX14;
    int unkX18;
    int unkX1C;
    float unkX20;
    int unk24;
    int unk28;
    int unk2C;
    int unk30;
    int unk34;
    int unk38;
} Bone <optimize=false>;

typedef struct {
    Block block(13);
    int boneCount;
    Bone bones[boneCount];
    Assert(FTell() == block.end);
} Skeleton <bgcolor=cLtGray>;


typedef struct {
    Block block(15);
    short unk00;
    short unk02;
} Block15;


typedef struct {
    int unk00;
    string str;
    ubyte unkX[0xE4];
} Block16Item <optimize=false>;

typedef struct (int count) {
    Block block(16);
    Block16Item items[count];
    Assert(FTell() == block.end);
} Block16 <bgcolor=cGray>;


typedef struct {
    Block block(17);
    string ltx;
    Assert(FTell() == block.end);
} Block17 <bgcolor=cDkGray>;


typedef struct {
    Block block(18);
    string str1;
    string str2;
    int unkX00;
    string str3;
    float unkY00;
    string str4;
    float unkZ00;
    Assert(FTell() == block.end);
} Block18 <bgcolor=cLtRed>;

//------------------------------------------------

Block1 header1;
Block18 header2;
MeshesBlock meshes;
Skeleton skeleton;
Block16 block16(skeleton.boneCount);
// Variable data beyond this point, not sure how to tell what should be present
