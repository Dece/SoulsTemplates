//------------------------------------------------
//--- 010 Editor v10.0 Binary Template
//
//      File: Xray\LEVEL.bt
//   Authors: TKGP
//   Version: 
//   Purpose: Xray level files
//  Category: Xray
// File Mask: level
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "..\Util.bt"
#include "XrayUtil.bt"

//------------------------------------------------

typedef struct {
    Block block(1);
    short unk00;
    short unk02;
    Assert(FTell() == block.end);
} Header <bgcolor=cLtRed>;


typedef struct {
    string str;
} String <read=ReadStructString, optimize=false>;

string ReadStructString(String& str) {
    return str.str;
}

typedef struct {
    Block block(2);
    int materialCount;
    String materials[materialCount];
    Assert(FTell() == block.end);
} Materials <bgcolor=cLtGreen, read=ReadMaterials>;

string ReadMaterials(Materials& mats) {
    string str;
    return SPrintf(str, "[%i]", mats.materialCount);
}


typedef struct {
    int unk00;
    int unk04;
    int unk08;
    int unk0C;
    int unk10;
    int unk14;
    int unk18;
    int unk1C;
    int unk20;
    int unk24;
    int unk28;
    int unk2C;
    int unk30;
    float unk34;
    float unk38;
    float unk3C;
    float unk40;
    float unk44;
    float unk48;
    float unk4C;
    float unk50;
    float unk54;
    float unk58;
    int unk5C;
    int unk60;
    int unk64;
    int unk68;
    int unk6C;
    int unk70;
    int unk74;
    int unk78;
    int unk7C;
    int unk80;
} Block3Item1;

typedef struct {
    int unk00;
    int unk04;
} Block3Item2;

typedef struct {
    Block block(3);
    Block3Item1 item1s[10];
    int unkX00;
    int unkX04;
    int unkX08;
    int unkX0C;
    int unkX10;
    int unkX14;
    int unkX18;
    Block3Item2 item2s[unkX18];
    ubyte data[block.end - FTell()];
    Assert(FTell() == block.end);
} Block3 <bgcolor=cAqua>;


typedef struct {
    short unk00;
    short unk02;
    Vector3 unk04;
    Vector3 unk10;
    Vector3 unk1C;
    Vector3 unk28;
    int unk34;
    int unk38;
    int unk3C;
    int unk40;
    int unk44;
    int unk48;
    int unk4C;
} Block4Item;

typedef struct {
    Block block(4);
    while (FTell() < block.end) {
        Block4Item items;
    }
    Assert(FTell() == block.end);
} Block4 <bgcolor=cYellow>;


typedef struct {
    ubyte data[0x6C];
} Block6Item;

typedef struct {
    Block block(6);
    while (FTell() < block.end) {
        Block6Item items;
    }
    Assert(FTell() == block.end);
} Block6 <bgcolor=cPurple>;


typedef struct {
    float unk00;
    float unk04;
    float unk08;
    float unk0C;
    short unk10;
} Block7Item;

typedef struct {
    Block block(7);
    while (FTell() < block.end) {
        Block7Item items;
    }
    Assert(FTell() == block.end);
} Block7 <bgcolor=cSilver>;


typedef struct {
    int index;
    int length <format=hex>;
    int unk00;
    int unk04;
    int unk08;
    int unk0C;
    int unk10;
    short unk14[unk10 / 2];
} Block8Item;

typedef struct {
    Block block(8);
    while (FTell() < block.end) {
        Block8Item items;
    }
    Assert(FTell() == block.end);
} Block8 <bgcolor=cRed>;

//------------------------------------------------

Header header;
Block4 block4;
Block6 block6;
Block7 block7;
Block3 block3;
Materials materials;
Block8 block8;
