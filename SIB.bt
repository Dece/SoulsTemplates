//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: SIB.bt
//   Authors: TKGP
//   Version: 
//   Purpose: Source quality model format; only one example (c9990 in DeS) known to exist
//  Category: Dantelion
// File Mask: *.sib
//  ID Bytes: [+40] 53 49 42 20
//   History: 
//------------------------------------------------

#include "Util.bt"

typedef struct (byte assert) {
    ubyte value; if (assert != -1) Assert(value == assert);
    if (FTell() % 4 != 0)
        ubyte padding[4 - FTell() % 4];
} Marker <read=ReadMarker>;

string ReadMarker(Marker& marker) {
    string str;
    SPrintf(str, "%2Xh", marker.value);
    return str;
}


typedef struct (int typeAssert, int versionAssert, byte markerAssert) {
    Align(4);
    int zero; Assert(zero == 0);
    int length <format=hex>;
    local int end <format=hex> = FTell() + length;
    int type <format=hex>; if (typeAssert != -1) Assert(type == typeAssert);
    int version; if (versionAssert != -1) Assert(version == versionAssert);
    Marker marker(markerAssert);
} Block <read=ReadBlock, bgcolor=cBlack, fgcolor=cWhite>;

string ReadBlock(Block& block) {
    string str;
    SPrintf(str, "Len %8Xh | Type %8Xh | Ver %i", block.length, block.type, block.version);
    return str;
}


typedef struct {
    Block block(-1, -1, -1);
    FSeek(block.end);
} SkippedBlock <read=ReadSkippedBlock, optimize=false>;

string ReadSkippedBlock(SkippedBlock& block) {
    return ReadBlock(block.block);
}


typedef struct {
    int length;
    if (length > 0)
        char str[length];
    else
        local string str = "";
} PrefixString <read=ReadPrefixString>;

string ReadPrefixString(PrefixString& ps) {
    return ps.str;
}


typedef struct (byte assertMarker) {
    int length;
    if (length > 0)
        char str[length];
    else
        local string str = "";
    Marker marker(assertMarker);
} MarkedString <read=ReadMarkedString>;

string ReadMarkedString(MarkedString& ms) {
    return ms.str;
}

////////////////////////////////////////////////////////////////

/*
typedef struct {
    Align(4);
    Block block;
    int unk08;
    int unk0C;
    int unk10;
    int unk14;
    int unk18;
    int unk1C;
    int unk20;
    int unk24;
    MarkedString name;
    MarkedString type;
    int unkX00;
    
    if (type.str == "BITMAP") {
        Block valueBlock;
        byte valueBytes[valueBlock.length];
    } else if (type.str == "BOOL") {
        Block stringBlock;
        byte stringBytes[stringBlock.length];
        int unkY00;
        int unkY04;
        Block valueBlock;
        byte valueBytes[valueBlock.length];
    } else if (type.str == "FLOAT") {
        Block stringBlock;
        byte stringBytes[stringBlock.length];
        int unkY00;
        int unkY04;
        Block valueBlock;
        byte valueBytes[valueBlock.length];
    } else if (type.str == "INT") {
        Block stringBlock;
        byte stringBytes[stringBlock.length];
        int unkY00;
        int unkY04;
        Block valueBlock;
        byte valueBytes[valueBlock.length];
    } else if (type.str == "NORMALBUMP") {
        Block valueBlock;
        byte valueBytes[valueBlock.length];
    } else if (type.str == "RGB") {
        Block stringBlock;
        byte stringBytes[stringBlock.length];
        int unkY00;
        int unkY04;
        Block valueBlock;
        byte valueBytes[valueBlock.length];
    } else if (type.str == "STRING") {
        Block stringBlock;
        byte stringBytes[stringBlock.length];
        int unkY00;
        int unkY04;
        Block valueBlock;
        byte valueBytes[valueBlock.length];
    } else if (type.str == "TEXMAP") {
        Block stringBlock;
        byte stringBytes[stringBlock.length];
        int unkY00;
        int unkY04;
        Block valueBlock;
        byte valueBytes[valueBlock.length];
    } else {
        Printf(type.str);
        Assert(false);
    }
} Param <read=ReadParam, bgcolor=cAqua, optimize=false>;

string ReadParam(Param& param) {
    string str;
    SPrintf(str, "%s %s", param.type.str, param.name.str);
    return str;
}


typedef struct {
    Align(4);
    Block blockA;
    int unk08;
    int unk0C;
    int unk10;
    Block blockB;
    int unkB08;
    int unkB0C;
    int unkB10;
    MarkedString name;
    int unkC00;
    int unkC04;
    int unkC08;
    Param params[unkC00];
} ParamGroupA <read=ReadParamGroupA, bgcolor=cLtBlue, optimize=false>;

string ReadParamGroupA(ParamGroupA& group) {
    return group.name.str;
}


typedef struct {
    Block block;
    int unk08;
    int unk0C;
    int unk10;
    int unk14;
    int unk18;
    int unk1C;
    int unk20;
    int unk24;
    MarkedString name1;
    int unkB00;
    int unkB04;
    int unkB08;
    int unkB0C;
    int unkB10;
    int unkB14;
    int unkB18;
    int unkB1C;
    int unkB20;
    int unkB24;
    int unkB28;
    int unkB2C;
    MarkedString name2;
    int unkC00;
    int unkC04;
    int unkC08;
    Param params[unkC00];
    Marker marker;
    int unkD04;
} ParamGroupB <read=ReadParamGroupB, bgcolor=cLtBlue, optimize=false>;

string ReadParamGroupB(ParamGroupB& group) {
    return group.name.str;
}


typedef struct {
    Block block;
    int unk08;
    int unk0C;
    int unk10;
    int unk14;
    int unk18;
    int unk1C;
    ParamGroupB paramGroupBs[unk14];
} MaterialParams;


typedef struct {
    Block block;
    int unk08;
    int unk0C;
    int unk10;
    MarkedString type;
    int unkX00;
    int unkX04;
    Param param;
    Align(4);
} Texture <read=ReadTexture, bgcolor=cDkAqua, optimize=false>;

string ReadTexture(Texture& tex) {
    return tex.type.str;
}


typedef struct {
    Block block;
    int unk08;
    int unk0C;
    int unk10;
    int unk14;
    int unk18;
    int unk1C;
    Texture textures[unk14];
} Textures <bgcolor=cBlack, fgcolor=cWhite>;


typedef struct {
    Block block;
    int unk08;
    int unk0C;
    int unk10;
    int unk14;
    int unk18;
    int unk1C;
    int unk20;
    int unk24;
    AlignString shading;
    int unkB[33];
    Textures textures;
    ParamGroupA paramGroupAs[2];
} Shader <bgcolor=cLtAqua>;


typedef struct {
    Block block;
    int unk08;
    int unk0C;
    int unk10;
    int unk14;
    int unk18;
    int unk1C;
    int unk20;
    int unk24;
    int unk28;
    int unk2C;
    MarkedString type;
    MarkedString name;
    int unkC00;
    Shader shader;
    MaterialParams params;
    int unkD[10];
} Material <read=ReadMaterial, bgcolor=cBlue, optimize=false>;

string ReadMaterial(Material& mat) {
    return "mat";
}


typedef struct {
    int unk00;
    int length;
    int unk08;
    int unk0C;
    int unk10;
    int unk14;
    int unk18;
    int unk1C;
    Material materials[unk14];
} Materials <bgcolor=cBlack, fgcolor=cWhite>;
*/

////////////////////////////////////////////////////////////////

typedef struct {
    Block block(5, 2, 0x34);
    int unk00;
    int unk04;
    int unk08;
} Footer;


typedef struct {
    Block block(0x5000000, 3, 0x34);
    int unk00;
    int unk04;
    int unk08;
    int unk0C;
    int unk10;
} EntityFooter;


typedef struct {
    Block block(0x3010102, 4, 0x34);
    int count;
    int unk04;
    int unk08;
    int unk0C;
    MarkedString type(0x04); Assert(type.str == "FLOAT3");
    int unkA00;
} Float3Header;


typedef struct {
    Block block(0x3010800, 2, 0x01);
    Float3Header float3Header;
    int unkA00;
    int floatCount;
    Vector3 tangents[float3Header.count];
} VertexTangents;


typedef struct {
    Block block(0x3010400, 2, 0x01);
    Float3Header float3Header;
    int unkA00;
    int floatCount;
    Vector3 normals[float3Header.count];
} VertexNormals;


typedef struct {
    Block block(0x3010300, 2, 0x01);
    Float3Header float3Header;
    int unkA00;
    int floatCount;
    Vector3 positions[float3Header.count];
} VertexPositions;


typedef struct {
    Block block(0x3010205, 1, 0xA3);
    PrefixString winding;
} WindingOrder <read=ReadWindingOrder>;

string ReadWindingOrder(WindingOrder& order) {
    return order.winding.str;
}


typedef struct {
    Block block(0x3010203, 4, 0x35);
    int unk00;
    Marker marker1(0x34);
    int unk08;
    Marker marker2(0x34);
    int vertexCount;
    Marker marker3(0x04);
    int unk18;
    WindingOrder windingOrder;
} MeshInfo;


typedef struct {
    Block block(0x3010202, 3, 0x01);
    MeshInfo meshInfo;
    Marker endMeshInfo(0xC4);
    int indexCount;
    int indices[indexCount];
    int unkA00;
    int unkA04;
} Mesh <optimize=false>;


typedef struct {
    Block block(0x3010206, 9, 0x34);
    int indicesPerVertex;
    Marker marker1(0x35);
    int positionIndex;
    Marker marker2(0x35);
    int unk10;
    Marker marker3(0x35);
    int unk18;
    Marker marker4(0x35);
    int unk20;
    Marker marker5(0x35);
    int unk28;
    Marker marker6(0x35);
    int unk30;
    Marker marker7(0x35);
    int unk38;
    Marker marker8(0x35);
    int unk40;
} IndexLayout;


typedef struct {
    Block block(0x3010201, 4, 0x34);
    int unk00;
    int unk04;
    MarkedString str(0x01);
    IndexLayout indexLayout;
    int unkB00;
    int unkB04;
} TriListInfo;


typedef struct {
    Block block(0x3010200, 2, 0x01);
    TriListInfo triListInfo;
    int unkA00;
    int meshCount;
    struct { Mesh meshes[meshCount]; } meshes;
} Meshes;


typedef struct {
    Block block(0x3010002, 2, 0x34);
    int unk00;
    int unk04;
    int unk08;
} TriDataBlock1_1;


typedef struct {
    Block block(0x3010001, 3, 0xA3);
    MarkedString str(0x01);
    TriDataBlock1_1 triDataBlock1_1;
    int unkA00;
    int unkA04;
} GeometryInfo <read=ReadGeometryInfo>;

string ReadGeometryInfo(GeometryInfo& info) {
    return info.str.str;
}


typedef struct {
    Block block(-1, -1, -1);
    if (block.type == 0x3010000) {
        GeometryInfo geometryInfo;
        int unkA00;
        int dataBlockCount;
        Meshes meshes;
        VertexPositions vertexPositions;
        VertexNormals vertexNormals;
        VertexTangents vertexTangents;
        SkippedBlock triListData[dataBlockCount - 4];
    } else {
        FSeek(block.end);
    }
} EntityData <optimize=false>;


typedef struct {
    Block block(0x3000004, 4, 0x01);
    FSeek(block.end);
} EntityInfo3;


typedef struct {
    Block block(0x3000003, 2, 0x35);
    int unk00;
    int unk04;
    PrefixString str;
} UnkMeshBlock2_1 <read=ReadUnkMeshBlock2_1>;

string ReadUnkMeshBlock2_1(UnkMeshBlock2_1& block) {
    return block.str.str;
}


typedef struct {
    Block block(0x3000002, 4, 0x01);
    UnkMeshBlock2_1 unkBlock2_1_1;
    Marker endUnkBlock2_1_1(-1);
    UnkMeshBlock2_1 unkBlock2_1_2;
    Marker endUnkBlock2_1_2(-1);
    UnkMeshBlock2_1 unkBlock2_1_3;
    Marker endUnkBlock2_1_3(-1);
    int unkC04;
} EntityInfo2;


typedef struct {
    Block block(0x3000001, 3, 0x35);
    int entityIndex;
    Marker marker(0xA3);
    MarkedString name(0xA3);
    PrefixString type;
} EntityInfo1 <read=ReadEntityInfo1>;

string ReadEntityInfo1(EntityInfo1& info) {
    string str;
    SPrintf(str, "%s %s", info.type.str, info.name.str);
    return str;
}


typedef struct {
    Block block(0x3000000, 4, 0x01);
    EntityInfo1 entityInfo1;
    Marker endEntityInfo1(0x01);
    EntityInfo2 entityInfo2;
    Marker endEntityInfo2(0x01);
    EntityInfo3 entityInfo3;
    Marker endEntityInfo3(0x04);
    int blockCount;
    if (blockCount > 1) {
        EntityData dataBlocks[blockCount - 1];
    }
    EntityFooter entityFooter;
} Entity <read=ReadEntity, optimize=false>;

string ReadEntity(Entity& entity) {
    return ReadEntityInfo1(entity.entityInfo1);
}


typedef struct {
    Block block(4, 2, 0x34);
    int unk00;
    int unk04;
    int unk08;
    struct { Entity entities[unk00]; } entities;
} Entities <bgcolor=cLtYellow>;


typedef struct {
    Block block(3, 2, 0x34);
    // TODO
    FSeek(block.end);
} Materials;


typedef struct {
    Block block(0x3000003, 2, 0x35);
    int unk00;
    int unk04;
    PrefixString name;
} Bone <read=ReadBone, bgcolor=cGreen, optimize=false>;

string ReadBone(Bone& bone) {
    return bone.name.str;
}


typedef struct {
    Block block(0x1010001, 4, 0xA3);
    MarkedString name(0x34);
    int unkA00;
    int unkA04;
    int unkA08;
    struct { Bone bones[unkA00]; } bones;
    Marker marker(0x04);
    int unkB00;
} Skeleton <read=ReadSkeleton, bgcolor=cLtGreen, optimize=false>;

string ReadSkeleton(Skeleton& skel) {
    return skel.name.str;
}


typedef struct {
    Block block(0x1010000, 3, 0x34);
    int unk00;
    int unk04;
    int unk08;
    struct { Skeleton skeletons[unk00]; } skeletons;
    int unkA00;
    int unkA04;
} Skeletons;


typedef struct {
    Block block(0x1000002, 6, 0xA3);
    // TODO
    FSeek(block.end);
} UnkAnimBlock3;

typedef struct {
    Block block(0x1000001, 3, 0x35);
    // TODO
    FSeek(block.end);
} UnkAnimBlock2;

typedef struct {
    Block block(0x1000000, 3, 0xBA);
    // TODO
    FSeek(block.end);
} UnkAnimBlock1;

typedef struct {
    Block block(-1, -1, -1);
    MarkedString motion1(0xA3);
    MarkedString motion2(0x01);
    UnkAnimBlock1 unkBlock1;
    int unkA00;
    UnkAnimBlock2 unkBlock2;
    int unkB00;
    UnkAnimBlock3 unkBlock3;
    Marker unkBlock3End(0x04);
    int unkC00;
    Skeletons skeletons;
} Motion <bgcolor=cLtGreen>;


typedef struct {
    Block block(1, 7, 0x34);
    char magic[4]; Assert(magic == "SIB ");
    int unk04;
    int unk08;
    int unk0C;
    MarkedString path1(0xA3);
    MarkedString path2(0xA3);
    MarkedString name1(0xA3);
    MarkedString name2(0xA3);
    PrefixString version;
} Header;


typedef struct {
    Block block(0, 6, 0x01);
    Header header;
    Marker endHeader(0x01);
    Motion motion;
    Marker endMotion(0x01);
    Materials materials;
    Marker endMaterials(0x01);
    Entities entities;
    Marker endEntities(0x01);
    Footer footer;
    Marker end(0x04);
    int unkE04;
} File <bgcolor=cLtRed>;

////////////////////////////////////////////////////////////////

File file;