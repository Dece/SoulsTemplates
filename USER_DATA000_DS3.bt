//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: USER_DATA000_DS3.bt
//   Authors: TKGP
//   Version: 
//   Purpose: DS3 character slot save data
//  Category: Dark Souls
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef struct {
    ubyte checksum[16];
    int checksumSize; Assert(checksumSize == 0xC0000);
    int unk14; Assert(unk14 == 0x62);
    int unk18;
    int playtime;
    int unk20; Assert(unk20 == 0x6C);
    int unk24;
    int unk28; Assert(unk28 == 0x6C);
    int unk2C;
    int unk30; Assert(unk30 == 0x5C);
    int unk34;
    int unk38;
    int unk3C; Assert(unk3C == 0x8E);
    int unk40;
    int unk44; Assert(unk44 == 8);
    int unk48;
    int unk4C; Assert(unk4C == 0x33E01);
    int unk50;
    int unk54;
    int unk58;
    int unk5C; Assert(unk5C == 0x50);
    int unk60;
    int unk64; Assert(unk64 == 0x20004);
    int unk68;
    int unk6C; Assert(unk6C == 0x5B);
    int unk70;
    int unk74;
    int unk78;
    int unk7C;
} Header;

typedef struct {
    short unk00;
    short unk02;
    int unk04;
    
    if (unk00 != 0) {
        int unk08;
        int unk0C;
        int unk10; Assert(unk10 == 1);
        float unk14; Assert(unk14 == 0);
        int unk18; Assert(unk18 == 0);
        float unk1C; Assert(unk1C == 0);
        int unk20; Assert(unk20 == 0);
        float unk24; Assert(unk24 == 0);
        int unk28; Assert(unk28 == 0);
        float unk2C; Assert(unk2C == 0);
        int unk30; Assert(unk30 == 0);
        float unk34; Assert(unk34 == 0);
        int unk38; Assert(unk38 == 0);
    }
} Unk1 <optimize=false>;

typedef struct {
    int unk00; Assert(unk00 == 0);
    int unk04; Assert(unk04 == 0);
    int health1;
    int health2;
    int health3;
    int mana1;
    int mana2;
    int mana3;
    int unk20; Assert(unk20 == 0);
    int stamina1;
    int stamina2;
    int stamina3;
    int unk30; Assert(unk30 == 0);
    int vigor;
    int attunement;
    int endurance;
    int strength;
    int dexterity;
    int intelligence;
    int faith;
    int luck;
    int unk54; Assert(unk54 == 0);
    int unk58; Assert(unk58 == 0);
    int vitality;
    int soulLevel;
    int souls;
    int soulMemory;
    int unk6C; Assert(unk6C == 0);
    int unk70; Assert(unk70 == 0);
    int unk74; Assert(unk74 == 0);
    wchar_t name[0x10];
    short unk98; Assert(unk98 == 0);
    byte gender;
    byte unk9B;
    byte class;
    byte body;
    byte gift;
    byte unk9F;
    byte unkA0;
    byte unkA1;
    byte unkA2;
    byte unkA3;

    local int i;
    for (i = 0; i < 11; i++) {
        int unkA4; Assert(unkA4 == 0);
    }
    
    int poisonResist;
    int bleedResist;
    int poisonResist2;
    int curseResist;
    int frostResist;
    int unkE4;
    int unkE8;
    int unkEC; Assert(unkEC == 0);
    int unkF0;
    int unkF4; Assert(unkF4 == 0);
    int unkF8;
    int unkFC;
    int unk100; Assert(unk100 == 0);
    int unk104; Assert(unk104 == 0);
    int unk108; Assert(unk108 == 0);
    int unk10C; Assert(unk10C == 0);
    int unk110; Assert(unk110 == 0);
    int unk114;
    int unk118;
    int unk11C;
    int unk120;
    int unk124; Assert(unk124 == 0);
    int unk128; Assert(unk128 == 0);
    int unk12C; Assert(unk12C == 0);
    int unk130; Assert(unk130 == 0);
    int unk134; Assert(unk134 == 0);
    int unk138; Assert(unk138 == 0);
    int unk13C; Assert(unk13C == 0);
    
    struct {
        int unk00; Assert(unk00 == -1);
        int unk04; Assert(unk04 == 0);
        int unk08; Assert(unk08 == 0);
        int unk0C; Assert(unk0C == 0);
    } unk1s[11] <optimize=false>;
} Stats;

typedef struct {
    int unk00;
    int idAndCategory;
    int quantity;
    int unk0C;
} Item;

typedef struct {
    int leftWeapon1Index;
    int rightWeapon1Index;
    int leftWeapon2Index;
    int rightWeapon2Index;
    int leftWeapon3Index;
    int rightWeapon3Index;
    int arrow1Index;
    int bolt1Index;
    int arrow2Index;
    int bolt2Index;
    int unk28; Assert(unk28 == -1);
    int unk2C; Assert(unk2C == -1);
    int headIndex;
    int chestIndex;
    int armsIndex;
    int legsIndex;
    int unk40; Assert(unk40 == -1);
    int ring1Index;
    int ring2Index;
    int ring3Index;
    int ring4Index;
    int covenantIndex;
    int stance;
    int unk5C;
    int unk60;
    int unk64;
    int unk68;
    int unk6C;
    int unk70;
    int leftWeapon1ID;
    int rightWeapon1ID;
    int leftWeapon2ID;
    int rightWeapon2ID;
    int leftWeapon3ID;
    int rightWeapon3ID;
    int arrow1ID;
    int bolt1ID;
    int arrow2ID;
    int bolt2ID;
    int unk9C; Assert(unk9C == -1);
    int unkA0; Assert(unkA0 == -1);
    int headID;
    int chestID;
    int armsID;
    int legsID;
    int unkB4; Assert(unkB4 == -1);
    int ring1ID;
    int ring2ID;
    int ring3ID;
    int ring4ID;
    int covenantID;
    int unkCC;
    int unkD0;
    int unkD4;
    int unkD8;
    int unkDC;
    int unkE0;
    int unkE4;
    int unkE8;
    int unkEC;
    int unkF0;
    int unkF4; Assert(unkF4 == 0);
    int unkF8; Assert(unkF8 == 0);
    int unkFC;
    int unk100;
    int unk104;
    int unk108;
    int unk10C; Assert(unk10C == 0);
    int unk110;
    int unk114;
    int unk118;
    int unk11C;
    int unk120;
    int unk124; Assert(unk124 == 0);

    int itemCount1;
    Item inventory[0x780];
    int itemCount2;
    Item keys[0x80];
    int itemCount3;
    Item unkItems3[0x80];

    struct {
        int unk00;
        int unk04;
    } unkSomethings[15];
    
    int item1ID;
    int item1Index;
    int item2ID;
    int item2Index;
    int item3ID;
    int item3Index;
    int item4ID;
    int item4Index;
    int item5ID;
    int item5Index;
    int item6ID;
    int item6Index;
    int item7ID;
    int item7Index;
    int item8ID;
    int item8Index;
    int item9ID;
    int item9Index;
    int item10ID;
    int item10Index;
    int unk;
    int startItem1ID;
    int startItem1Index;
    int startItem2ID;
    int startItem2Index;
    int startItem3ID;
    int startItem3Index;
    int startItem4ID;
    int startItem4Index;
    int startItem5ID;
    int startItem5Index;
    int unka00; Assert(unka00 == 0);
    int unka04; Assert(unka04 == -1);
    int unka08;
    int unka0C;
    int unka10;
    int unka14;
    int unka18;
    int unka1C;
    int unka20;
    int unka24;
    int unkCount;
    
    if (unkCount > 0) {
    struct {
        int id;
        int unk04;
    } unkSomethings2[unkCount];
    }
    
    int leftWeapon1ID2;
    int rightWeapon1ID2;
    int leftWeapon2ID2;
    int rightWeapon2ID2;
    int leftWeapon3ID2;
    int rightWeapon3ID2;
    int arrow1ID2;
    int bolt1ID2;
    int arrow2ID2;
    int bolt2ID2;
    int unkb28; Assert(unkb28 == -1);
    int unkb2C; Assert(unkb2C == -1);
    int headID2;
    int chestID2;
    int armsID2;
    int legsID2;
    int unkb40; Assert(unkb40 == -1);
} Items;


Header header <bgcolor=cLtRed>;
struct {
    Unk1 unk1s[0x1800];
} unk1s <bgcolor=cRed>;
Stats stats <bgcolor=cLtGreen>;
Items items <bgcolor=cGreen>;