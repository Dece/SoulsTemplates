//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: Util.bt
//   Authors: TKGP
//   Version: 
//   Purpose: Utility types and functions for SoulsTemplates
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#ifndef _SOULSTEMPLATES_UTIL
    #define _SOULSTEMPLATES_UTIL

void Align(int align) {
    if (FTell() % align > 0) {
        FSkip(align - (FTell() % align));
    }
}

ubyte ReverseBits(ubyte value) {
    return
        ((value & 0b00000001) << 7) |
        ((value & 0b00000010) << 5) |
        ((value & 0b00000100) << 3) |
        ((value & 0b00001000) << 1) |
        ((value & 0b00010000) >> 1) |
        ((value & 0b00100000) >> 3) |
        ((value & 0b01000000) >> 5) |
        ((value & 0b10000000) >> 7);
}

int InRange(float val, float min, float max) {
    return val >= min && val <= max;
}

typedef struct {
    float x;
    float y;
} Vector2 <read=ReadVector2>;

string ReadVector2(Vector2& vec) {
    string str;
    SPrintf(str, "<%7.2f, %7.2f>", vec.x, vec.y);
    return str;
}

string ReadVector2Fmt(Vector2& vec, int width, int precision) {
    string fmt;
    SPrintf(fmt, "<%%%d.%df, %%%d.%df>",
        width, precision, width, precision);
    
    string str;
    return SPrintf(str, fmt, vec.x, vec.y);
}


typedef struct {
    float x;
    float y;
    float z;
} Vector3 <read=ReadVector3>;

string ReadVector3(Vector3& vec) {
    string str;
    SPrintf(str, "<%7.2f, %7.2f, %7.2f>", vec.x, vec.y, vec.z);
    return str;
}

string ReadVector3Fmt(Vector3& vec, int width, int precision) {
    string fmt;
    SPrintf(fmt, "<%%%d.%df, %%%d.%df, %%%d.%df>",
        width, precision, width, precision, width, precision);
    
    string str;
    return SPrintf(str, fmt, vec.x, vec.y, vec.z);
}


typedef struct {
    float x;
    float y;
    float z;
    float w;
} Vector4 <read=ReadVector4>;

string ReadVector4(Vector4& vec) {
    string str;
    SPrintf(str, "<%7.2f, %7.2f, %7.2f, %7.2f>", vec.x, vec.y, vec.z, vec.w);
    return str;
}

string ReadVector4Fmt(Vector4& vec, int width, int precision) {
    string fmt;
    SPrintf(fmt, "<%%%d.%df, %%%d.%df, %%%d.%df, %%%d.%df>",
        width, precision, width, precision, width, precision, width, precision);
    
    string str;
    return SPrintf(str, fmt, vec.x, vec.y, vec.z, vec.w);
}

// Return true if all components of v are in [min, max].
int V4InRange(Vector4 &v, float min, float max) {
    return (
        InRange(v.x, min, max) &&
        InRange(v.y, min, max) &&
        InRange(v.z, min, max) &&
        InRange(v.w, min, max)
    );
}

// Return true of min and max represent valid corners of a bounding box,
// i.e. all components of min <= components of max.
int V4BBValid(Vector4 &min, Vector4 &max) {
    return (
        min.x <= max.x &&
        min.y <= max.y &&
        min.z <= max.z
    );  // Do not compare w as the mantissa sometimes contain trash digits.
}

// Return true if v components are all more or less 0s, discarding trash floats.
int V4ApproxZero(Vector4 &v) {
    return (
        InRange(v.x, -0.0000000000000001, 0.0000000000000001) &&
        InRange(v.y, -0.0000000000000001, 0.0000000000000001) &&
        InRange(v.z, -0.0000000000000001, 0.0000000000000001) &&
        InRange(v.w, -0.0000000000000001, 0.0000000000000001)
    );
}


typedef struct {
    short x;
    short y;
    short z;
    short w;
} VectorShort4 <read=ReadVectorShort4>;

string ReadVectorShort4(VectorShort4& vec) {
    string str;
    SPrintf(str, "<%i, %i, %i, %i>", vec.x, vec.y, vec.z, vec.w);
    return str;
}


typedef struct (int longOffset, int unicode) {
    if (longOffset)
        quad offset <format=hex>;
    else
        uint offset <format=hex>;

    local quad pos <hidden=true> = FTell();
    FSeek(offset);
    if (unicode)
        wstring str;
    else
        string str;
    FSeek(pos);
} OffsetString <read=ReadOffsetString>;

wstring ReadOffsetString(OffsetString& os) {
    return os.str;
}


typedef struct {
    if (VARINT_LONG)
        quad val;
    else
        int val;
} Varint <read=ReadVarint>;

string ReadVarint(Varint& v) {
    string s;
    SPrintf(s, "%Xh | %d", v.val, v.val);
    return s;
}

#endif