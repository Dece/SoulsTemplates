//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: MSB3.bt
//   Authors: TKGP
//   Version: 
//   Purpose: DS3 map layouts
//  Category: Dantelion
// File Mask: *.msb
//  ID Bytes: 4D 53 42 20 01 00 00 00 10 00 00 00 00 00 01 FF 03 00 00 00
//   History: 
//------------------------------------------------

#include "Util.bt"
#include "MSB3\Model.bt"
#include "MSB3\Event.bt"
#include "MSB3\Point.bt"
#include "MSB3\Route.bt"
#include "MSB3\Layer.bt"
#include "MSB3\Part.bt"
#include "MSB3\PartsPose.bt"
#include "MSB3\BoneName.bt"

LittleEndian();

//------------------------------------------------

typedef struct {
    char magic[4]; Assert(magic == "MSB ");
    int unk04; Assert(unk04 == 1);
    int headerSize; Assert(headerSize == 0x10);
    byte isBigEndian; Assert(isBigEndian == 0);
    byte isBitBigEndian; Assert(isBitBigEndian == 0);
    byte textEncoding; Assert(textEncoding == 1);
    byte is64BitOffset; Assert(is64BitOffset == -1);
} Header <bgcolor=cLtRed>;


typedef struct (int assertVersion, string assertName) {
    int version; Assert(version == assertVersion);
    int count;
    OffsetString name(1, 1); Assert(name.str == assertName);
    if (count > 1) {
        quad offsets[count - 1];
    }
    quad nextParamOffset;
} Param <read=ReadParam>;

string ReadParam(Param& param) {
    string str;
    SPrintf(str, "[%4i] %i %s", param.count - 1, param.version, param.name.str);
    return str;
}


typedef struct {
    Param param(3, "MODEL_PARAM_ST");
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i]);
        Model model;
    }
    FSeek(param.nextParamOffset);
} ModelParam <read=ReadModelParam, bgcolor=cLtGreen>;

string ReadModelParam(ModelParam& modelParam) {
    return ReadParam(modelParam.param);
}


typedef struct {
    Param param(3, "EVENT_PARAM_ST");
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i]);
        Event event;
    }
    FSeek(param.nextParamOffset);
} EventParam <read=ReadEventParam, bgcolor=cYellow>;

string ReadEventParam(EventParam& eventParam) {
    return ReadParam(eventParam.param);
}


typedef struct {
    Param param(3, "POINT_PARAM_ST");
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i]);
        Point point;
    }
    FSeek(param.nextParamOffset);
} PointParam <read=ReadPointParam, bgcolor=cAqua>;

string ReadPointParam(PointParam& pointParam) {
    return ReadParam(pointParam.param);
}


typedef struct {
    Param param(3, "ROUTE_PARAM_ST");
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i]);
        Route route;
    }
    FSeek(param.nextParamOffset);
} RouteParam <read=ReadRouteParam, bgcolor=cRed>;

string ReadRouteParam(RouteParam& routeParam) {
    return ReadParam(routeParam.param);
}


typedef struct {
    Param param(3, "LAYER_PARAM_ST");
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i]);
        Layer layer;
    }
    FSeek(param.nextParamOffset);
} LayerParam <read=ReadLayerParam, bgcolor=cLtGray, fgcolor=cBlack>;

string ReadLayerParam(LayerParam& layerParam) {
    return ReadParam(layerParam.param);
}


typedef struct {
    Param param(3, "PARTS_PARAM_ST");
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i]);
        Part part;
    }
    FSeek(param.nextParamOffset);
} PartsParam <read=ReadPartsParam, bgcolor=cLtBlue>;

string ReadPartsParam(PartsParam& partsParam) {
    return ReadParam(partsParam.param);
}


typedef struct {
    Param param(0, "MAPSTUDIO_PARTS_POSE_ST");
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i]);
        PartsPose partsPose;
    }
    FSeek(param.nextParamOffset);
} MapstudioPartsPose <read=ReadMapstudioPartsPose, bgcolor=cLtGray, fgcolor=cBlack>;

string ReadMapstudioPartsPose(MapstudioPartsPose& partsPose) {
    return ReadParam(partsPose.param);
}


typedef struct {
    Param param(0, "MAPSTUDIO_BONE_NAME_STRING");
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i]);
        BoneName boneName;
    }
    Assert(param.nextParamOffset == 0);
} MapstudioBoneName <read=ReadMapstudioBoneName, bgcolor=cLtGray, fgcolor=cBlack>;

string ReadMapstudioBoneName(MapstudioBoneName& boneName) {
    return ReadParam(boneName.param);
}

//------------------------------------------------

Header header;
ModelParam models;
EventParam events;
PointParam points;
RouteParam routes;
LayerParam layers;
PartsParam parts;
MapstudioPartsPose partsPoses;
MapstudioBoneName boneNames;
