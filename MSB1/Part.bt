//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: MSB1\Part.bt
//   Authors: Meowmaritus, TKGP
//   Version: 
//   Purpose: DS1 map layout parts
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

enum <int> PartType {
    PartTypeMapPiece = 0,
    PartTypeObject = 1,
    PartTypeEnemy = 2,
    //PartTypeItem = 3,
    PartTypePlayer = 4,
    PartTypeCollision = 5,
    //PartTypeNPCWander = 6,
    //PartTypeProtoboss = 7,
    PartTypeNavmesh = 8,
    PartTypeDummyObject = 9,
    PartTypeDummyEnemy = 10,
    PartTypeConnectCollision = 11,
};

struct PartMapPiece;
struct PartObject;
struct PartEnemy;
struct PartPlayer;
struct PartCollision;
struct PartNavmesh;
struct PartConnectCollision;

typedef struct {
    local quad start <hidden=true> = FTell();

    int nameOffset <format=hex>;
    PartType type;
    int id;
    int modelIndex;
    int sibOffset <format=hex>;
    Vector3 position;
    Vector3 rotation;
    Vector3 scale;
    int drawGroups[4];
    int dispGroups[4];
    int entityDataOffset <format=hex>;
    int typeDataOffset <format=hex>;
    int unk60 <hidden=true>; Assert(unk60 == 0);
    
    FSeek(start + nameOffset);
    string name;
    FSeek(start + sibOffset);
    string sib;
    
    FSeek(start + entityDataOffset);
    int entityID;
    byte lightID;
    byte fogID;
    byte scatterID;
    byte lensFlareID;
    byte shadowID;
    byte dofID;
    byte toneMapID;
    byte toneCorrectID;
    byte lanternID;
    byte lodParamID;
    byte unkE0E <hidden=true>; Assert(unkE0E == 0);
    byte isShadowSrc;
    byte isShadowDest;
    byte isShadowOnly;
    byte drawByReflectCam;
    byte drawOnlyReflectCam;
    byte useDepthBiasFloat;
    byte disablePointLightEffect;
    byte unkE16 <hidden=true>; Assert(unkE16 == 0);
    byte unkE17 <hidden=true>; Assert(unkE17 == 0);
    
    FSeek(start + typeDataOffset);
    switch (type) {
        case PartTypeMapPiece: PartMapPiece mapPiece; break;
        case PartTypeObject:
        case PartTypeDummyObject: PartObject object; break;
        case PartTypeEnemy:
        case PartTypeDummyEnemy: PartEnemy enemy; break;
        case PartTypePlayer: PartPlayer player; break;
        case PartTypeCollision: PartCollision collision; break;
        case PartTypeNavmesh: PartNavmesh navmesh; break;
        case PartTypeConnectCollision: PartConnectCollision connectCollision; break;
    }
} Part <read=ReadPart>;

wstring ReadPart(Part& part) {
    string str;
    SPrintf(str, "%i ", part.type);
    return str + part.name;
}


typedef struct {
    int unk00 <hidden=true>; Assert(unk00 == 0);
    int unk04 <hidden=true>; Assert(unk04 == 0);
} PartMapPiece;


typedef struct {
    int unk00 <hidden=true>; Assert(unk00 == 0);
    int collisionIndex;
    int unk08;
    short unk0C;
    short unk0E;
    int unk10;
    int unk14 <hidden=true>; Assert(unk14 == 0);
} PartObject;


typedef struct {
    int unk00 <hidden=true>; Assert(unk00 == 0);
    int unk04 <hidden=true>; Assert(unk04 == 0);
    int thinkParamID;
    int npcParamID;
    int talkID;
    float unk14;
    int charaInitID;
    int collisionIndex;
    int unk20 <hidden=true>; Assert(unk20 == 0);
    int unk24 <hidden=true>; Assert(unk24 == 0);
    short movePointIndices[8];
    int unk38;
    int unk3C;
} PartEnemy;


typedef struct {
    int unk00 <hidden=true>; Assert(unk00 == 0);
    int unk04 <hidden=true>; Assert(unk04 == 0);
    int unk08 <hidden=true>; Assert(unk08 == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
} PartPlayer;


typedef struct {
    byte hitFilterID;
    byte soundSpaceType;
    short envLightMapSpotIndex;
    float reflectPlaneHeight;
    int nvmGroups[4];
    int vagrantEntityIDs[3];
    short mapNameID;
    short disableStart;
    int disableBonfireEntityID;
    int unk2C <hidden=true>; Assert(unk2C == -1);
    int unk30 <hidden=true>; Assert(unk30 == -1);
    int unk34 <hidden=true>; Assert(unk34 == -1);
    int playRegionID;
    short lockCamParamID1;
    short lockCamParamID2;
    int unk40 <hidden=true>; Assert(unk40 == 0);
    int unk44 <hidden=true>; Assert(unk44 == 0);
    int unk48 <hidden=true>; Assert(unk48 == 0);
    int unk4C <hidden=true>; Assert(unk4C == 0);
} PartCollision;


typedef struct {
    int nvmGroups[4];
    int unk10 <hidden=true>; Assert(unk10 == 0);
    int unk14 <hidden=true>; Assert(unk14 == 0);
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1C <hidden=true>; Assert(unk1C == 0);
} PartNavmesh;


typedef struct {
    int collisionIndex;
    byte mapID[4];
    int unk08 <hidden=true>; Assert(unk08 == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
} PartConnectCollision;