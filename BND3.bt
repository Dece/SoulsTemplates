//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: BND3.bt
//   Authors: TKGP
//   Version: 
//   Purpose: FromSoft Binder3 containers
//  Category: Dantelion
// File Mask: *.*bnd
//  ID Bytes: 42 4E 44 33
//   History: 
//------------------------------------------------

#include "Util.bt"

local ubyte format <hidden=true> = ReadUByte(0xC);
if (ReadByte(0xD) || ReadByte(0xC) & 0b10000000)
    BigEndian();
else
    LittleEndian();


typedef struct {
    char magic[4]; Assert(magic == "BND3");
    char version[8];
    ubyte rawFlags <hidden=true, format=hex>;
    byte bigEndian; Assert(bigEndian == 0 || bigEndian == 1);
    // Flags are reversed when the bigEndian byte is set,
    // but not when the bigEndian /flag/ is set.
    local ubyte flags <format=binary> = bigEndian ? ReverseBits(rawFlags) : rawFlags;
    byte unk0E; Assert(unk0E == 0 || unk0E == 1);
    byte unk0F <hidden=true>; Assert(unk0F == 0);
    int fileCount;
    int fileHeadersEnd <format=hex>;
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1C <hidden=true>; Assert(unk1C == 0);
} Header <bgcolor=cLtRed>;


typedef struct (ubyte format) {
    ubyte flags <format=hex>; Assert(
           flags == 0x02 // uncompressed
        || flags == 0x03 // compressed
        || flags == 0x40 // uncompressed
        || flags == 0xC0 // compressed
        );
    byte unk01 <hidden=true>; Assert(unk01 == 0);
    byte unk02 <hidden=true>; Assert(unk02 == 0);
    byte unk03 <hidden=true>; Assert(unk03 == 0);

    int compressedSize <format=hex>;
    int fileOffset <format=hex>;

    if (format & 0b01000000) {
        int id;
    }

    local quad pos <hidden=true>;
    if (format & 0b00010000) {
        int nameOffset <format=hex>;
        pos = FTell();
        FSeek(nameOffset);
        string name <bgcolor=cGreen>;
        FSeek(pos);
    }

    if (format & 0b00000100) {
        int uncompressedSize <format=hex>;
    }
    
    if (compressedSize > 0) {
        pos = FTell();
        FSeek(fileOffset);
        ubyte bytes[compressedSize] <bgcolor=cAqua>;
        FSeek(pos);
    }
} File <read=ReadFile, bgcolor=cLtGreen, optimize=false>;

wstring ReadFile(File& file) {
    return file.name;
}


Header header;
if (header.fileCount > 0) {
    struct {
        File files(header.flags)[header.fileCount];
    } files;
}